(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{G:()=>O});const t=[],n={};function o(e){return{add:function(e){t.push(e)},mainFolder:t,addFolder:i,removeFromMainFolder:function(e){const n=t.indexOf(e);t.splice(n,1)}}}function i(e){n.folder=e,console.log(n)}const d={week:[],today:[],pushToWeek(e){this.week.push(e)},pushToToday(e){this.today.push(e)},pushtoImportant(e){important.push(e)},getWeek(){return this.week},getToday(){return this.today},removeWeek(e){const t=this.week.indexOf(e);this.week.splice(t,1)},removeToday(e){const t=this.week.indexOf(e);this.today.splice(t,1)}};function r(e){document.querySelectorAll(".task-container").forEach((e=>e.remove())),e.forEach((e=>s(e)))}function s(e){const t=document.querySelector(".tasks-container"),n=document.createElement("div");n.classList.add("task-container");const o=document.createElement("p");n.appendChild(o),o.classList.add("task-name"),o.innerHTML=e.title;const i=document.createElement("div"),d=document.createElement("p");d.innerHTML=e.dueDate,d.classList.add("task-date"),n.appendChild(d),e.storeDomElement(n),i.classList.add("task-logos");const r=function(){const e=[];for(let t=1;t<=3;t++){const t=document.createElement("span"),n=document.createElement("img");t.appendChild(n),e.push(t)}return e[0].firstElementChild.src="img/edit.png",e[0].classList.add("edit"),e[2].firstElementChild.src="img/trash.png",e[2].classList.add("trash"),e[1].firstElementChild.src="img/info.svg  ",e[1].classList.add("info"),e}();e.storeIcons(r),r.forEach((e=>i.appendChild(e))),n.appendChild(i),t.appendChild(n)}function l(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function c(e){l(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===a(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function u(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var m={};function p(){return m}function f(e,t){var n,o,i,d,r,s,a,m;l(1,arguments);var f=p(),h=u(null!==(n=null!==(o=null!==(i=null!==(d=null==t?void 0:t.weekStartsOn)&&void 0!==d?d:null==t||null===(r=t.locale)||void 0===r||null===(s=r.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==i?i:f.weekStartsOn)&&void 0!==o?o:null===(a=f.locale)||void 0===a||null===(m=a.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==n?n:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=c(e),v=y.getDay(),g=(v<h?7:0)+v-h;return y.setDate(y.getDate()-g),y.setHours(0,0,0,0),y}function h(e,t,n){l(2,arguments);var o=f(e,n),i=f(t,n);return o.getTime()===i.getTime()}function y(e){l(1,arguments);var t=c(e);return t.setHours(0,0,0,0),t}function v(e,t){l(2,arguments);var n=y(e),o=y(t);return n.getTime()===o.getTime()}let g="";function D(e,t,n){const i=new FormData(e),a=Object.fromEntries(i),{title:c}=a,{description:u}=a,{dueDate:m}=a,{priority:p}=a;if("editTask"===t){const e=n.parentFolder;console.log(e.toDofolder),n.editToDo(c,u,m,p),r(e.toDofolder)}else"addTask"===t?function(e,t,n,i,r){const a=new M(e,t,n,i);(function(e){const t=Date.parse(e.dueDate);let n="",o="";(function(e,t){return l(1,arguments),h(e,Date.now(),t)})(t)&&(n=!0),function(e){return l(1,arguments),v(e,Date.now())}(t)&&(o=!0),!0===n&&(d.pushToWeek(e),e.addDateFolder("week")),!0===o&&(d.pushToToday(e),e.addDateFolder("today"))})(a),o().add(a),""!==r?(r.addToFolder(a),r.switchMainDisplayFolder()):s(a)}(c,u,m,p,n):E(c)}function E(e){const t=new x(e);g=t,console.log(t),t.newFolderDom(),t.switchMainDisplayFolder(),O.push(t),localStorage.setItem("folders",JSON.stringify(O)),console.log(O)}const k=document.getElementById("Epopup"),C=document.getElementsByClassName("popup-main");function w(e,t){const n=event.target.id,o=document.getElementById("popup-header");return k.style.display="flex","warning"===e?(document.querySelector(".popup-title").classList.add("header-warning"),function(e){b("on");const t=document.createElement("p");t.innerHTML=`This will permanently delete the folder:<br><br>${e}<br><br>Click 'delete' to confirm.`,C[0].appendChild(t),C[0].classList.add("warning");const n=document.createElement("button");n.textContent="Delete",n.classList.add("delete-button"),C[0].appendChild(n);const o=e;n.addEventListener("click",(function(e){o.deleteToDo(),n.remove(),C[0].classList.remove("warning"),t.remove(),form.innerHTML=" ",k.style.display="none",b(),document.querySelector(".popup-title").classList.remove("header-warning"),e.preventDefault()}))}(t),void(o.textContent="Delete Folder")):"info"===e?(o.textContent="Info",function(e){document.getElementById("form").style.display="none";const t=document.createElement("div");t.classList.add("info-container"),C[0].appendChild(t),t.appendChild(L("Title",e.title)),t.appendChild(L("Description",e.description)),t.appendChild(L("Due Date",e.dueDate)),t.appendChild(L("Priority",e.priority)),t.appendChild(L("Folder",e.parentFolder.folder))}(t),void T("info")):("edit"===e&&(o.textContent="Edit",F(["Title","Description","Due Date","Priority"],0,t),T("editTask",t)),"createFolder"==n&&(o.textContent="Create Folder",F(["Title"]),C[0].classList.add("createFolder"),T("createFolder")),void("add-task"==n&&(o.textContent="Add task",F(["Title","Description","Due Date","Priority"]),T("addTask"))))}function F(e,t,n){const o=document.getElementById("form"),i=n;function d(e,t,n){const i=document.createElement("div");i.classList.add("input-wrapper"),o.appendChild(i);const d=document.createElement("label");d.textContent=e,d.htmlFor=n,i.appendChild(d),i.appendChild(t)}console.log(i),e.map((e=>{if("Title"===e){const t=document.createElement("input");void 0!==i&&(t.value=n.title);const o="title";t.name=o,d(e,t,o)}if("Description"===e){const r=document.createElement("textarea");void 0!==i&&(r.value=n.description),r.name="description",d(e,r)}if("Due Date"===e){const s=document.createElement("input");void 0!==i&&(s.value=n.dueDate),s.name="dueDate",s.type="date",d(e,s)}if("Priority"===e){const l=document.createElement("select");function a(e){const t=document.createElement("option");t.textContent=e,l.appendChild(t)}l.name="priority",a("Low"),a("High"),void 0!==i&&(l.value=n.priority),d(e,l)}}))}function T(e,t){const n=document.createElement("button");n.textContent="Submit",n.classList.add("submit-button"),n.type="submit",n.addEventListener("click",(o=>{o.preventDefault(),"addTask"===e?D(n.form,"addTask",g):"editTask"===e?D(n.form,"editTask",t):(D(n.form,"createFolder"),C[0].classList.remove("createFolder")),d.innerHTML=" ",k.style.display="none"}));const o=document.createElement("button");o.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".info-container");console.log(t);const n=document.getElementById("form");if(void 0!==t&&"none"===n.style.display){const e=document.querySelector(".info-container"),t=document.getElementById("form");console.log(t),e.innerHTML=" ",e.remove(),t.style.display=""}n.innerHTML=" ",k.style.display="none"})),o.textContent="Cancel";const i=document.createElement("div");if(i.appendChild(n),i.appendChild(o),i.classList.add("buttons-container"),"info"===e)return document.querySelector(".info-container").appendChild(i),void n.remove();const d=document.getElementById("form");d.appendChild(i)}function L(e,t){const n=document.createElement("div");n.classList.add("info-item");const o=document.createElement("p"),i=document.createElement("p");if(o.textContent=e,i.textContent=t,"Description"===e){i.classList.add("desc");const e=document.createElement("div");return e.classList.add("desc-container"),e.appendChild(i),n.appendChild(o),n.appendChild(e),n}return n.appendChild(o),n.appendChild(i),n}function b(e){document.getElementById("form").style.display="on"===e?"none":""}function S(e){document.querySelector(".main-title").textContent=e}class x{toDofolder=[];constructor(e){this.folder=e}setHeader(){document.querySelector(".main-title").textContent=this.folder}newFolderDom(e){this.setHeader(),this.switchMainDisplayFolder(this.toDofolder);const t=document.querySelector(".folders-container");let n=document.createElement("a");n.classList.add("menu-link-item"),n.textContent=this.folder,t.appendChild(n);let o=new Image(20,20);o.src="img/trash.png",n.appendChild(o),o.addEventListener("click",(function(){i.deleteFolder()}));const i=this;n.addEventListener("click",(function(){i.switchMainDisplayFolder()})),this.folderDom=n}addToFolder(e){this.toDofolder.push(e),console.log(this.toDofolder),e.addParentFolder(this)}deleteFromFolder(e){let t=this.toDofolder.indexOf(e);this.toDofolder.splice(t,1)}switchMainDisplayFolder(){g=this,console.log(this.toDofolder),r(this.toDofolder),this.setHeader()}deleteFolder(){w("warning",this)}deleteToDo(){this.toDofolder.forEach((e=>{o().removeFromMainFolder(e),!0===e.inWeekFolder&&d.removeWeek(e),!0===e.inTodayFolder&&d.removeToday(e)})),this.deleteDOM()}deleteDOM(){this.folderDom.remove(),this.switchAway()}switchAway(){r(t),S("All")}}class M{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}storeIcons(e){const t=this;Array.from(e).forEach((e=>e.addEventListener("click",(e=>{const n=event.currentTarget;n.classList.contains("trash")?(t.delete(),t.delete2()):n.classList.contains("edit")?w("edit",t):w("info",t)}))))}storeDomElement(e){this.taskContainer=e}delete(){this.taskContainer.remove()}delete2(){console.log(this.parentFolder),this.parentFolder.deleteFromFolder(this),!0===this.inWeekFolder&&d.removeWeek(this),!0===this.inTodayFolder&&d.removeToday(this),o().removeFromMainFolder(this)}addParentFolder(e){this.parentFolder=e,console.log(this.parentFolder)}editToDo(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}addDateFolder(e){"week"===e&&(this.inWeekFolder=!0),"today"===e&&(this.inTodayFolder=!0)}}document.getElementById("add-task").addEventListener("click",w),document.getElementById("createFolder").addEventListener("click",w);const O=JSON.parse(localStorage.getItem("folders"))||[];document.querySelectorAll(".menu-link-item").forEach((e=>e.addEventListener("click",(e=>{const n=event.target;e.preventDefault(),"Week"===n.textContent?(S("Week"),r(d.getWeek())):"All"===n.textContent?(S("All"),r(t)):"Today"===n.textContent&&(S("Today"),r(d.getToday()))})))),E("Default")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,