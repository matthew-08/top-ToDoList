(()=>{"use strict";const e=[],t={};function n(t){return{add:function(t){e.push(t)},mainFolder:e,addFolder:o,removeFromMainFolder:function(t){let n=e.indexOf(t);e.splice(n,1)}}}function o(e){t.folder=e,console.log(t)}const i={week:[],today:[],pushToWeek(e){this.week.push(e)},pushToToday(e){this.today.push(e)},pushtoImportant(e){important.push(e)},getWeek(){return this.week},getToday(){return this.today},removeWeek(e){let t=this.week.indexOf(e);this.week.splice(t,1)},removeToday(e){let t=this.week.indexOf(e);this.today.splice(t,1)}};function d(e){console.log(e),document.querySelectorAll(".task-container").forEach((e=>e.remove())),e.forEach((e=>l(e)))}function l(e){let t=document.querySelector(".tasks-container"),n=document.createElement("div");n.classList.add("task-container");let o=document.createElement("p");n.appendChild(o),o.classList.add("task-name"),o.innerHTML=e.title;let i=document.createElement("div"),d=document.createElement("p");d.innerHTML=e.dueDate,d.classList.add("task-date"),n.appendChild(d),e.storeDomElement(n),i.classList.add("task-logos");let l=function(){let e=[];for(let t=1;t<=3;t++){let t=document.createElement("span"),n=document.createElement("img");t.appendChild(n),e.push(t)}return e[0].firstElementChild.src="/img/edit.png",e[0].classList.add("edit"),e[2].firstElementChild.src="/img/trash.png",e[2].classList.add("trash"),e[1].firstElementChild.src="/img/info.svg  ",e[1].classList.add("info"),e}();e.storeIcons(l),l.forEach((e=>i.appendChild(e))),n.appendChild(i),t.appendChild(n)}function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function s(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===a(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function c(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var u={};function m(){return u}function p(e,t){var n,o,i,d,l,a,u,p;r(1,arguments);var f=m(),h=c(null!==(n=null!==(o=null!==(i=null!==(d=null==t?void 0:t.weekStartsOn)&&void 0!==d?d:null==t||null===(l=t.locale)||void 0===l||null===(a=l.options)||void 0===a?void 0:a.weekStartsOn)&&void 0!==i?i:f.weekStartsOn)&&void 0!==o?o:null===(u=f.locale)||void 0===u||null===(p=u.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==n?n:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=s(e),g=y.getDay(),v=(g<h?7:0)+g-h;return y.setDate(y.getDate()-v),y.setHours(0,0,0,0),y}function f(e,t,n){r(2,arguments);var o=p(e,n),i=p(t,n);return o.getTime()===i.getTime()}function h(e){r(1,arguments);var t=s(e);return t.setHours(0,0,0,0),t}function y(e,t){r(2,arguments);var n=h(e),o=h(t);return n.getTime()===o.getTime()}let g="";function v(e,t,o){let a=new FormData(e),s=Object.fromEntries(a),c=s.title,u=s.description,m=s.dueDate,p=s.priority;if("editTask"===t){let e=o.parentFolder;console.log(e.toDofolder),o.editToDo(c,u,m,p),d(e.toDofolder)}else"addTask"===t?function(e,t,o,d,a){let s=new b(e,t,o,d);(function(e){let t=Date.parse(e.dueDate),n="",o="";(function(e,t){return r(1,arguments),f(e,Date.now(),t)})(t)&&(n=!0),function(e){return r(1,arguments),y(e,Date.now())}(t)&&(o=!0),!0===n&&(i.pushToWeek(e),e.addDateFolder("week")),!0===o&&(i.pushToToday(e),e.addDateFolder("today"))})(s),n().add(s),""!==a?(a.addToFolder(s),a.switchMainDisplayFolder()):l(s)}(c,u,m,p,o):D(c)}function D(e){let t=new L(e);g=t,t.newFolderDom(),t.switchMainDisplayFolder()}const E=document.getElementById("Epopup"),k=document.getElementsByClassName("popup-main");function C(e,t){let n=event.target.id;const o=document.getElementById("popup-header");return E.style.display="flex","warning"===e?(document.querySelector(".popup-title").classList.add("header-warning"),function(e){document.getElementById("form").style.display="none";let t=document.createElement("p");t.innerHTML=`This will permanently delete the folder:<br>${e}<br>Click 'delete' to confirm.`,k[0].appendChild(t),console.log("test"),k[0].classList.add("warning")}(t),void(o.textContent="Delete Folder")):"info"===e?(o.textContent="Info",function(e){document.getElementById("form").style.display="none";let t=document.createElement("div");t.classList.add("info-container"),k[0].appendChild(t),t.appendChild(T("Title",e.title)),t.appendChild(T("Description",e.description)),t.appendChild(T("Due Date",e.dueDate)),t.appendChild(T("Priority",e.priority)),t.appendChild(T("Folder",e.parentFolder.folder))}(t),void w("info")):("edit"===e&&(o.textContent="Edit",F(["Title","Description","Due Date","Priority"],0,t),w("editTask",t)),"createFolder"==n&&(o.textContent="Create Folder",F(["Title"]),k[0].classList.add("createFolder"),w("createFolder")),void("add-task"==n&&(o.textContent="Add task",F(["Title","Description","Due Date","Priority"]),w("addTask"))))}function F(e,t,n){const o=document.getElementById("form");let i=n;function d(e,t,n){const i=document.createElement("div");i.classList.add("input-wrapper"),o.appendChild(i);const d=document.createElement("label");d.textContent=e,d.htmlFor=n,i.appendChild(d),i.appendChild(t)}console.log(i),e.map((e=>{if("Title"===e){const t=document.createElement("input");void 0!==i&&(t.value=n.title);const o="title";t.name=o,d(e,t,o)}if("Description"===e){const l=document.createElement("textarea");void 0!==i&&(l.value=n.description),l.name="description",d(e,l)}if("Due Date"===e){const r=document.createElement("input");void 0!==i&&(r.value=n.dueDate),r.name="dueDate",r.type="date",d(e,r)}if("Priority"===e){const a=document.createElement("select");function s(e){let t=document.createElement("option");t.textContent=e,a.appendChild(t)}a.name="priority",s("Low"),s("High"),void 0!==i&&(a.value=n.priority),d(e,a)}}))}function w(e,t){console.log(t);let n=document.createElement("button");n.textContent="Submit",n.classList.add("submit-button"),n.type="submit",n.addEventListener("click",(function(o){o.preventDefault(),"addTask"===e?v(n.form,"addTask",g):"editTask"===e?v(n.form,"editTask",t):(v(n.form,"createFolder"),k[0].classList.remove("createFolder")),d.innerHTML=" ",E.style.display="none"}));let o=document.createElement("button");o.addEventListener("click",(function(e){e.preventDefault();let t=document.querySelector(".info-container");console.log(t);let n=document.getElementById("form");if(void 0!==t&&"none"===n.style.display){const e=document.querySelector(".info-container"),t=document.getElementById("form");console.log(t),e.innerHTML=" ",e.remove(),t.style.display=""}n.innerHTML=" ",E.style.display="none"})),o.textContent="Cancel";let i=document.createElement("div");if(i.appendChild(n),i.appendChild(o),i.classList.add("buttons-container"),"info"===e)return document.querySelector(".info-container").appendChild(i),void n.remove();const d=document.getElementById("form");d.appendChild(i)}function T(e,t){let n=document.createElement("div");n.classList.add("info-item");let o=document.createElement("p"),i=document.createElement("p");if(o.textContent=e,i.textContent=t,"Description"===e){i.classList.add("desc");let e=document.createElement("div");return e.classList.add("desc-container"),e.appendChild(i),n.appendChild(o),n.appendChild(e),n}return n.appendChild(o),n.appendChild(i),n}class L{toDofolder=[];constructor(e){this.folder=e}setHeader(){document.querySelector(".main-title").textContent=this.folder}newFolderDom(e){this.setHeader(),this.switchMainDisplayFolder(this.toDofolder);const t=document.querySelector(".folders-container");let n=document.createElement("a");n.classList.add("menu-link-item"),n.textContent=this.folder,t.appendChild(n);let o=new Image(20,20);o.src="/img/trash.png",n.appendChild(o),n.addEventListener("click",(function(){i.deleteFolder()}));const i=this;n.addEventListener("click",(function(){i.switchMainDisplayFolder()}))}addToFolder(e){this.toDofolder.push(e),console.log(this.toDofolder),e.addParentFolder(this)}deleteFromFolder(e){let t=this.toDofolder.indexOf(e);this.toDofolder.splice(t,1)}switchMainDisplayFolder(){g=this,console.log(this.toDofolder),d(this.toDofolder),this.setHeader()}deleteFolder(){console.log(this.folder),C("warning",this.folder)}}class b{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}storeIcons(e){const t=this;Array.from(e).forEach((e=>e.addEventListener("click",(function(e){let n=event.currentTarget;n.classList.contains("trash")?(t.delete(),t.delete2()):n.classList.contains("edit")?C("edit",t):C("info",t)}))))}storeDomElement(e){this.taskContainer=e}delete(){this.taskContainer.remove()}delete2(){console.log(this.parentFolder),this.parentFolder.deleteFromFolder(this),!0===this.inWeekFolder&&i.removeWeek(this),!0===this.inTodayFolder&&i.removeToday(this),n().removeFromMainFolder(this)}addParentFolder(e){this.parentFolder=e,console.log(this.parentFolder)}editToDo(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}addDateFolder(e){"week"===e&&(this.inWeekFolder=!0),"today"===e&&(this.inTodayFolder=!0)}}function S(e){document.querySelector(".main-title").textContent=e}document.getElementById("add-task").addEventListener("click",C),document.getElementById("createFolder").addEventListener("click",C),document.querySelectorAll(".menu-link-item").forEach((t=>t.addEventListener("click",(t=>{let n=event.target;t.preventDefault(),"Week"===n.textContent?(S("Week"),d(i.getWeek())):"All"===n.textContent?(S("All"),d(e)):"Today"===n.textContent&&(S("Today"),d(i.getToday()))})))),D("Default")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZVcsV0FBV04sT0FFSCxJQUF2QkEsS0FBSytMLGVBQ0xwTSxFQUFlWSxZQUFZUCxNQUUvQmxCLElBQWtCSyxxQkFBcUJhLEtBQzNDLENBRUFxTCxnQkFBZ0J6SyxHQUNaWixLQUFLOEcsYUFBZWxHLEVBQ3BCbkIsUUFBUUMsSUFBSU0sS0FBSzhHLGFBQ3JCLENBRUFFLFNBQVN6RixFQUFPcUYsRUFBYWxGLEVBQVNtRixHQUNsQzdHLEtBQUt1QixNQUFRQSxFQUNidkIsS0FBSzRHLFlBQWNBLEVBQ25CNUcsS0FBSzBCLFFBQVVBLEVBQ2YxQixLQUFLNkcsU0FBV0EsQ0FDcEIsQ0FFQVUsY0FBYy9ILEdBQ0ssU0FBWEEsSUFDQVEsS0FBSzhMLGNBQWUsR0FFVCxVQUFYdE0sSUFDQVEsS0FBSytMLGVBQWdCLEVBRTdCLEVDN0NKLFNBQVNqQixFQUFVa0IsR0FDQXZMLFNBQVNPLGNBQWMsZUFDL0IySCxZQUFjcUQsQ0FDekIsQ0N0QnNCdkwsU0FBU3NILGVBQWUsWUFDaENzQyxpQkFBaUIsUUFBU25DLEdBRWJ6SCxTQUFTc0gsZUFBZSxnQkFDaENzQyxpQkFBaUIsUUFBU25DLEdEUEZ6SCxTQUFTQyxpQkFBaUIsbUJBRXBEQyxTQUFReUksR0FBS0EsRUFBRWlCLGlCQUFpQixTQUFVakIsSUFDbkQsSUFBSTZDLEVBQUk5RCxNQUFNQyxPQUNkZ0IsRUFBRWtCLGlCQUNnQixTQUFsQjJCLEVBQUV0RCxhQUNGbUMsRUFBVSxRQUVWdEssRUFEYWIsRUFBZVMsWUFFSCxRQUFsQjZMLEVBQUV0RCxhQUNUbUMsRUFBVSxPQUVWdEssRUFBcUI1QixJQUNJLFVBQWxCcU4sRUFBRXRELGNBQ1RtQyxFQUFVLFNBRVZ0SyxFQURhYixFQUFlVSxZQUVoQyxNQ1BKdUgsRUFBVSxVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL2ZvbGRlcnMuanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vc3JjL2Rpc3BsYXlGb2xkZXJzLmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzU2FtZVdlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mRGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNTYW1lRGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9nZXRGb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVGhpc1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9wLXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1RvZGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9wb3B1cC5qcyIsIndlYnBhY2s6Ly90b3AtdG9kb2xpc3QvLi9zcmMvY3JlYXRlTmV3Rm9sZGVyLmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9hZGRUb0RvLmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9zaWRlYmFyLWxpbmtzLmpzIiwid2VicGFjazovL3RvcC10b2RvbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaXNwbGF5Rm9sZGVycyB9IGZyb20gXCIuL2Rpc3BsYXlGb2xkZXJzXCI7XG5leHBvcnQgY29uc3QgbWFpbkZvbGRlciA9IFsgXVxuY29uc3QgZXh0cmFGb2xkZXJzID0ge1xuXG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRvTWFpbkZvbGRlcihvaykge1xuICAgIFxuXG4gICAgZnVuY3Rpb24gYWRkKG9rKSB7XG4gICAgICAgICAgICBtYWluRm9sZGVyLnB1c2gob2spO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY2hlY2tNYWluRm9sZGVyKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhtYWluRm9sZGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGcm9tTWFpbkZvbGRlcihpdGVtKSB7XG4gICAgICAgIGxldCBpbmRleCA9IG1haW5Gb2xkZXIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgbWFpbkZvbGRlci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB7IGFkZCwgbWFpbkZvbGRlciwgYWRkRm9sZGVyLCByZW1vdmVGcm9tTWFpbkZvbGRlcn1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEZvbGRlcihmb2xkZXIpIHtcbiAgICBleHRyYUZvbGRlcnMuZm9sZGVyID0gZm9sZGVyXG4gICAgY29uc29sZS5sb2coZXh0cmFGb2xkZXJzKVxufVxuXG5cblxuZXhwb3J0IGNvbnN0IHNpZGVCYXJGb2xkZXJzID0ge1xuXG4gICAgd2VlazogWyBdLFxuICAgIHRvZGF5OiBbIF0sXG5cbiAgICBwdXNoVG9XZWVrKHRvRG8pIHtcbiAgICAgICAgdGhpcy53ZWVrLnB1c2godG9EbylcbiAgICB9LFxuXG4gICAgcHVzaFRvVG9kYXkodG9Ebykge1xuICAgICAgICB0aGlzLnRvZGF5LnB1c2godG9Ebyk7XG4gICAgfSxcblxuICAgIHB1c2h0b0ltcG9ydGFudCh0b0RvKSB7XG4gICAgICAgIGltcG9ydGFudC5wdXNoKHRvRG8pO1xuICAgIH0sXG4gICAgXG4gICAgZ2V0V2VlaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2VlaztcbiAgICB9LFxuXG4gICAgZ2V0VG9kYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvZGF5O1xuICAgIH0sXG4gICAgXG4gICAgcmVtb3ZlV2VlayhpdGVtKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMud2Vlay5pbmRleE9mKGl0ZW0pO1xuICAgICAgICB0aGlzLndlZWsuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlVG9kYXkoaXRlbSkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLndlZWsuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgdGhpcy50b2RheS5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxufVxuXG5cbiIsIlxuaW1wb3J0IHsgbWFpbkZvbGRlciB9IGZyb20gXCIuL2ZvbGRlcnNcIjtcblxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheUZvbGRlcnMob2spIHtcblxuICAgICAgICBjcmVhdGVOZWVkZWRFbGVtZW50cyhvaylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlTd2l0Y2hGb2xkZXJzKGZvbGRlcikge1xuICAgIGNvbnNvbGUubG9nKGZvbGRlcik7XG4gICAgbGV0IGN1cnJlbnRUYXNrQ29udGFpbmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFzay1jb250YWluZXJcIilcbiAgICBjdXJyZW50VGFza0NvbnRhaW5lcnMuZm9yRWFjaChlID0+IGUucmVtb3ZlKCkpO1xuICAgIGZvbGRlci5mb3JFYWNoKGUgPT4gY3JlYXRlTmVlZGVkRWxlbWVudHMoZSkpO1xuXG5cbn1cblxuLyogZnVuY3Rpb24gY3JlYXRlRE9NVGFzaygpIHtcbiAgICBjcmVhdGVOZWVkZWRFbGVtZW50cygpXG59ICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU5lZWRlZEVsZW1lbnRzKGUpIHtcbiAgICBsZXQgdGFza3NDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2tzLWNvbnRhaW5lclwiKVxuICAgIGxldCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuICAgIHRhc2tDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInRhc2stY29udGFpbmVyXCIpXG4gICAgbGV0IHRhc2tOYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcbiAgICB0YXNrQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhc2tOYW1lKTtcbiAgICB0YXNrTmFtZS5jbGFzc0xpc3QuYWRkKFwidGFzay1uYW1lXCIpXG4gICAgdGFza05hbWUuaW5uZXJIVE1MID0gZS50aXRsZTtcbiAgICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuICAgIGxldCBkYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcbiAgICBkYXRlLmlubmVySFRNTCA9IGUuZHVlRGF0ZVxuICAgIGRhdGUuY2xhc3NMaXN0LmFkZChcInRhc2stZGF0ZVwiKTtcbiAgICB0YXNrQ29udGFpbmVyLmFwcGVuZENoaWxkKGRhdGUpO1xuXG4gICAgZS5zdG9yZURvbUVsZW1lbnQodGFza0NvbnRhaW5lcik7XG5cbiAgICBkaXYuY2xhc3NMaXN0LmFkZChcInRhc2stbG9nb3NcIilcblxuICAgIGxldCBzcGFuID0gY3JlYXRlSWNvbnMoKTtcbiAgICBlLnN0b3JlSWNvbnMoc3Bhbik7XG4gICAgc3Bhbi5mb3JFYWNoKGUgPT4gZGl2LmFwcGVuZENoaWxkKGUpKTtcbiAgICB0YXNrQ29udGFpbmVyLmFwcGVuZENoaWxkKGRpdik7IFxuICAgIHRhc2tzQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhc2tDb250YWluZXIpO1xuXG5cbiAgICBcblxuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUljb25zKCkge1xuICAgIGxldCBhcnJheU9mU3BhbnMgPSBbIF1cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAzOyBpICsrKSB7XG4gICAgICAgIGxldCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgICAgIGxldCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICBzcGFuLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICAgIGFycmF5T2ZTcGFucy5wdXNoKHNwYW4pO1xuICAgIH1cblxuXG5cbiAgICBhcnJheU9mU3BhbnNbMF0uZmlyc3RFbGVtZW50Q2hpbGQuc3JjID0gXCIvaW1nL2VkaXQucG5nXCJcbiAgICBhcnJheU9mU3BhbnNbMF0uY2xhc3NMaXN0LmFkZChcImVkaXRcIilcbiAgICBhcnJheU9mU3BhbnNbMl0uZmlyc3RFbGVtZW50Q2hpbGQuc3JjID0gXCIvaW1nL3RyYXNoLnBuZ1wiXG4gICAgYXJyYXlPZlNwYW5zWzJdLmNsYXNzTGlzdC5hZGQoXCJ0cmFzaFwiKVxuICAgIGFycmF5T2ZTcGFuc1sxXS5maXJzdEVsZW1lbnRDaGlsZC5zcmMgPSBcIi9pbWcvaW5mby5zdmcgIFwiXG4gICAgYXJyYXlPZlNwYW5zWzFdLmNsYXNzTGlzdC5hZGQoXCJpbmZvXCIpXG4gICAgcmV0dXJuIGFycmF5T2ZTcGFuc1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZldlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFN1biBBdWcgMzEgMjAxNCAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LCB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDApOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldERheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgc3RhcnRPZldlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzU2FtZVdlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgd2VlayAoYW5kIG1vbnRoIGFuZCB5ZWFyKT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgd2VlayAoYW5kIG1vbnRoIGFuZCB5ZWFyKT9cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlcyBhcmUgaW4gdGhlIHNhbWUgd2VlayAoYW5kIG1vbnRoIGFuZCB5ZWFyKVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMzEgQXVndXN0IDIwMTQgYW5kIDQgU2VwdGVtYmVyIDIwMTQgaW4gdGhlIHNhbWUgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZVdlZWsobmV3IERhdGUoMjAxNCwgNywgMzEpLCBuZXcgRGF0ZSgyMDE0LCA4LCA0KSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB3ZWVrIHN0YXJ0cyB3aXRoIE1vbmRheSxcbiAqIC8vIGFyZSAzMSBBdWd1c3QgMjAxNCBhbmQgNCBTZXB0ZW1iZXIgMjAxNCBpbiB0aGUgc2FtZSB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lV2VlayhuZXcgRGF0ZSgyMDE0LCA3LCAzMSksIG5ldyBEYXRlKDIwMTQsIDgsIDQpLCB7XG4gKiAgIHdlZWtTdGFydHNPbjogMVxuICogfSlcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDEgSmFudWFyeSAyMDE0IGFuZCAxIEphbnVhcnkgMjAxNSBpbiB0aGUgc2FtZSB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lV2VlayhuZXcgRGF0ZSgyMDE0LCAwLCAxKSwgbmV3IERhdGUoMjAxNSwgMCwgMSkpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2FtZVdlZWsoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdFN0YXJ0T2ZXZWVrID0gc3RhcnRPZldlZWsoZGlydHlEYXRlTGVmdCwgb3B0aW9ucyk7XG4gIHZhciBkYXRlUmlnaHRTdGFydE9mV2VlayA9IHN0YXJ0T2ZXZWVrKGRpcnR5RGF0ZVJpZ2h0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGRhdGVMZWZ0U3RhcnRPZldlZWsuZ2V0VGltZSgpID09PSBkYXRlUmlnaHRTdGFydE9mV2Vlay5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBzdGFydE9mRGF5IGZyb20gXCIuLi9zdGFydE9mRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1NhbWVEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKT9cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgMDY6MDA6MDAgYW5kIDQgU2VwdGVtYmVyIDE4OjAwOjAwIGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0LCA2LCAwKSwgbmV3IERhdGUoMjAxNCwgOCwgNCwgMTgsIDApKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciBhbmQgNCBPY3RvYmVyIGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNCwgOSwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciwgMjAxNCBhbmQgNCBTZXB0ZW1iZXIsIDIwMTUgaW4gdGhlIHNhbWUgZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQpLCBuZXcgRGF0ZSgyMDE1LCA4LCA0KSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1NhbWVEYXkoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlUmlnaHQpO1xuICByZXR1cm4gZGF0ZUxlZnRTdGFydE9mRGF5LmdldFRpbWUoKSA9PT0gZGF0ZVJpZ2h0U3RhcnRPZkRheS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IHsgbmV3VG9EbyB9IGZyb20gXCIuL2FkZFRvRG9cIjtcbmltcG9ydCB7IGFkZFRvTWFpbkZvbGRlciwgYWRkRm9sZGVyLCB9IGZyb20gXCIuL2ZvbGRlcnNcIjtcbmltcG9ydCB7IGRpc3BsYXlGb2xkZXJzLCBkaXNwbGF5U3dpdGNoRm9sZGVycyB9IGZyb20gXCIuL2Rpc3BsYXlGb2xkZXJzXCI7XG5pbXBvcnQgeyBjcmVhdGVGb2xkZXIsIGZvbGRlciB9IGZyb20gXCIuL2NyZWF0ZU5ld0ZvbGRlclwiO1xuaW1wb3J0IGlzVGhpc1dlZWsgZnJvbSBcImRhdGUtZm5zL2lzVGhpc1dlZWtcIjtcbmltcG9ydCB7IGlzVG9kYXkgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcbmltcG9ydCB7IHNpZGVCYXJGb2xkZXJzIH0gZnJvbSBcIi4vZm9sZGVyc1wiO1xuXG5cblxuZXhwb3J0IGxldCBjdXJyZW50Zm9sZGVyID0gXCJcIlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybURhdGEoZm9ybSwgYnV0dG9uVHlwZSwgY3VycmVudEZvbGRlcikge1xuICAgIGxldCBrID0gZm9ybVxuICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShrKVxuICAgIGxldCBvYmplY3QgPSBPYmplY3QuZnJvbUVudHJpZXMoZm9ybURhdGEpXG4gICAgXG4gICAgbGV0IHRpdGxlID0gb2JqZWN0LnRpdGxlXG4gICAgbGV0IGRlc2NyaXB0aW9uID0gb2JqZWN0LmRlc2NyaXB0aW9uXG4gICAgbGV0IGR1ZURhdGUgPSBvYmplY3QuZHVlRGF0ZVxuICAgIGxldCBwcmlvcml0eSA9IG9iamVjdC5wcmlvcml0eVxuICAgIGlmIChidXR0b25UeXBlID09PSBcImVkaXRUYXNrXCIpIHtcbiAgICAgICAgbGV0IGZvbGRlciA9IGN1cnJlbnRGb2xkZXIucGFyZW50Rm9sZGVyO1xuICAgICAgICBjb25zb2xlLmxvZyhmb2xkZXIudG9Eb2ZvbGRlcikgIDtcbiAgICAgICAgY3VycmVudEZvbGRlci5lZGl0VG9Ebyh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KTtcbiAgICAgICAgZGlzcGxheVN3aXRjaEZvbGRlcnMoZm9sZGVyLnRvRG9mb2xkZXIpO1xuICAgIH0gZWxzZSBpZiAoYnV0dG9uVHlwZSA9PT0gXCJhZGRUYXNrXCIpIHtcbiAgICBhc3NpZ25Gb3JtRGF0YSh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBjdXJyZW50Rm9sZGVyKTtcbiAgICB9IGVsc2UgIHtcbiAgICAgICAgbmV3Rm9sZGVyKHRpdGxlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkZvcm1EYXRhKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIGN1cnJlbnRGb2xkZXIpIHtcbiAgICBcblxuICAgIGxldCB0b0RvID0gbmV3IG5ld1RvRG8odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSk7XG4gICAgZGV0ZXJtaW5lRGF0ZSh0b0RvKTtcbiAgICBhZGRUb01haW5Gb2xkZXIoKS5hZGQodG9Ebyk7XG4gICAgaWYgKGN1cnJlbnRGb2xkZXIgIT09IFwiXCIpIHtcbiAgICAgICAgY3VycmVudEZvbGRlci5hZGRUb0ZvbGRlcih0b0RvKTtcbiAgICAgICAgY3VycmVudEZvbGRlci5zd2l0Y2hNYWluRGlzcGxheUZvbGRlcigpO1xuICAgICAgICBcbiAgICB9IGVsc2Uge1xuICAgIGRpc3BsYXlGb2xkZXJzKHRvRG8pOyBcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdGb2xkZXIodGl0bGUpIHtcbiAgICBsZXQgbmV3Rm9sZGVyID0gbmV3IGZvbGRlcih0aXRsZSk7XG4gICAgY3VycmVudGZvbGRlciA9IG5ld0ZvbGRlcjtcbiAgICBuZXdGb2xkZXIubmV3Rm9sZGVyRG9tKCk7XG4gICAgbmV3Rm9sZGVyLnN3aXRjaE1haW5EaXNwbGF5Rm9sZGVyKCk7XG5cbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lRGF0ZSh0b0RvKSB7XG4gICAgbGV0IHBhcnNlZERhdGUgPSBEYXRlLnBhcnNlKHRvRG8uZHVlRGF0ZSk7XG4gICAgbGV0IHdlZWsgPSBcIlwiXG4gICAgbGV0IHRvZGF5ID0gXCJcIlxuXG4gICAgaWYgKGlzVGhpc1dlZWsocGFyc2VkRGF0ZSkpIHtcbiAgICAgICAgd2VlayA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoaXNUb2RheShwYXJzZWREYXRlKSl7XG4gICAgICAgIHRvZGF5ID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmICh3ZWVrID09PSB0cnVlKSB7XG4gICAgICAgIHNpZGVCYXJGb2xkZXJzLnB1c2hUb1dlZWsodG9Ebyk7XG4gICAgICAgIHRvRG8uYWRkRGF0ZUZvbGRlcihcIndlZWtcIik7XG5cbiAgICB9IGlmICh0b2RheSA9PT0gdHJ1ZSkge1xuICAgICAgICBzaWRlQmFyRm9sZGVycy5wdXNoVG9Ub2RheSh0b0RvKTtcbiAgICAgICAgdG9Eby5hZGREYXRlRm9sZGVyKFwidG9kYXlcIik7XG4gICAgfVxuXG59XG5cbiIsImltcG9ydCBpc1NhbWVXZWVrIGZyb20gXCIuLi9pc1NhbWVXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzVGhpc1dlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBzYW1lIHdlZWsgYXMgdGhlIGN1cnJlbnQgZGF0ZT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgc2FtZSB3ZWVrIGFzIHRoZSBjdXJyZW50IGRhdGU/XG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBwcmVzZW50IGluIHRoZSBGUCBzdWJtb2R1bGUgYXNcbiAqID4gaXQgdXNlcyBgRGF0ZS5ub3coKWAgaW50ZXJuYWxseSBoZW5jZSBpbXB1cmUgYW5kIGNhbid0IGJlIHNhZmVseSBjdXJyaWVkLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgaW4gdGhpcyB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgMjUgU2VwdGVtYmVyIDIwMTQsIGlzIDIxIFNlcHRlbWJlciAyMDE0IGluIHRoaXMgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzVGhpc1dlZWsobmV3IERhdGUoMjAxNCwgOCwgMjEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDI1IFNlcHRlbWJlciAyMDE0IGFuZCB3ZWVrIHN0YXJ0cyB3aXRoIE1vbmRheVxuICogLy8gaXMgMjEgU2VwdGVtYmVyIDIwMTQgaW4gdGhpcyB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNUaGlzV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyMSksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGhpc1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gaXNTYW1lV2VlayhkaXJ0eURhdGUsIERhdGUubm93KCksIG9wdGlvbnMpO1xufSIsImltcG9ydCBpc1NhbWVEYXkgZnJvbSBcIi4uL2lzU2FtZURheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNUb2RheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdG9kYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyA2IE9jdG9iZXIgMjAxNCwgaXMgNiBPY3RvYmVyIDE0OjAwOjAwIHRvZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNUb2RheShuZXcgRGF0ZSgyMDE0LCA5LCA2LCAxNCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RvZGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGlzU2FtZURheShkaXJ0eURhdGUsIERhdGUubm93KCkpO1xufSIsIlxuaW1wb3J0IHsgZ2V0Rm9ybURhdGEgfSBmcm9tIFwiLi9nZXRGb3JtRGF0YVwiXG5cbmltcG9ydCB7IGN1cnJlbnRmb2xkZXIgfSBmcm9tIFwiLi9nZXRGb3JtRGF0YVwiXG5cbmNvbnN0IHBvcHVwSCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiRXBvcHVwXCIpXG5jb25zdCBwb3B1cE1haW4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwicG9wdXAtbWFpblwiKVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFVwKGUsIHRvRG8pIHtcbiAgICBsZXQgcG9wVXAgPSBldmVudC50YXJnZXQuaWRcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBvcHVwLWhlYWRlclwiKVxuICAgIHBvcHVwSC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCJcblxuICAgIGlmKGUgPT09IFwid2FybmluZ1wiKSB7XG4gICAgICAgIGxldCBoZWFkZXJUb3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLXRpdGxlXCIpXG4gICAgICAgIGhlYWRlclRvcC5jbGFzc0xpc3QuYWRkKFwiaGVhZGVyLXdhcm5pbmdcIilcbiAgICAgICAgY3JlYXRlV2FybmluZ0JveCh0b0RvKTtcbiAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gXCJEZWxldGUgRm9sZGVyXCI7XG4gICAgICAgIHJldHVybjsgXG4gICAgfVxuXG4gICAgaWYgKGUgPT09IFwiaW5mb1wiKSB7XG4gICAgICAgIGhlYWRlci50ZXh0Q29udGVudCA9IFwiSW5mb1wiXG4gICAgICAgIGNyZWF0ZUluZm9Cb3hDb250ZW50cyh0b0RvKTtcbiAgICAgICAgY3JlYXRlQnV0dG9ucyhcImluZm9cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGlmKGUgPT09IFwiZWRpdFwiKSB7XG4gICAgICAgIGhlYWRlci50ZXh0Q29udGVudCA9IFwiRWRpdFwiXG4gICAgICAgIGNyZWF0ZUJveElucHV0KFtcIlRpdGxlXCIsIFwiRGVzY3JpcHRpb25cIiwgXCJEdWUgRGF0ZVwiLCBcIlByaW9yaXR5XCJdLCBcImVkaXRcIiwgdG9Ebyk7XG4gICAgICAgIGNyZWF0ZUJ1dHRvbnMoXCJlZGl0VGFza1wiLCB0b0RvKVxuICAgIH1cblxuXG4gICAgaWYgKHBvcFVwID09IFwiY3JlYXRlRm9sZGVyXCIpIHtcbiAgICAgICAgaGVhZGVyLnRleHRDb250ZW50ID0gXCJDcmVhdGUgRm9sZGVyXCJcbiAgICAgICAgY3JlYXRlQm94SW5wdXQoW1wiVGl0bGVcIl0pXG4gICAgICAgIHBvcHVwTWFpblswXS5jbGFzc0xpc3QuYWRkKFwiY3JlYXRlRm9sZGVyXCIpO1xuICAgICAgICBjcmVhdGVCdXR0b25zKFwiY3JlYXRlRm9sZGVyXCIpO1xuICAgIH1cbiBcbiAgICBpZiAocG9wVXAgPT0gXCJhZGQtdGFza1wiKSB7XG4gICAgICAgIGhlYWRlci50ZXh0Q29udGVudCA9IFwiQWRkIHRhc2tcIlxuICAgICAgICBjcmVhdGVCb3hJbnB1dChbXCJUaXRsZVwiLCBcIkRlc2NyaXB0aW9uXCIsIFwiRHVlIERhdGVcIiwgXCJQcmlvcml0eVwiXSk7XG4gICAgICAgIGNyZWF0ZUJ1dHRvbnMoXCJhZGRUYXNrXCIpO1xuICAgIH1cbiAgICBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQm94SW5wdXQoYXJyLCBlZGl0LCB0YXNrKSB7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9ybVwiKVxuICAgIGxldCBhID0gdGFzaztcbiAgICBjb25zb2xlLmxvZyhhKTtcbiAgICBhcnIubWFwKGUgPT4ge1xuICAgICAgICBpZiAoZSA9PT0gXCJUaXRsZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxuICAgICAgICAgICAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gdGFzay50aXRsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBcInRpdGxlXCJcbiAgICAgICAgICAgIGlucHV0Lm5hbWUgPSBuYW1lXG4gICAgICAgICAgICBzZXRJbnB1dExhYmVsKGUsIGlucHV0LCBuYW1lKVxuICAgICAgICB9XG4gICAgICAgIGlmKGUgPT09IFwiRGVzY3JpcHRpb25cIikge1xuICAgICAgICAgICAgY29uc3QgdGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIilcbiAgICAgICAgICAgIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0QXJlYS52YWx1ZSA9IHRhc2suZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0QXJlYS5uYW1lID0gXCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICBzZXRJbnB1dExhYmVsKGUsIHRleHRBcmVhKVxuICAgICAgICAgICAgXG5cbiAgICAgICAgfVxuICAgICAgICBpZihlID09PSBcIkR1ZSBEYXRlXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpXG4gICAgICAgICAgICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSB0YXNrLmR1ZURhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dC5uYW1lID0gXCJkdWVEYXRlXCJcbiAgICAgICAgICAgIGlucHV0LnR5cGUgPSBcImRhdGVcIlxuICAgICAgICAgICAgc2V0SW5wdXRMYWJlbChlLCBpbnB1dClcblxuICAgICAgICB9XG4gICAgICAgIGlmKGUgPT09IFwiUHJpb3JpdHlcIikge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKVxuICAgICAgICAgICAgc2VsZWN0Lm5hbWUgPSBcInByaW9yaXR5XCI7XG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVPcHRpb24gKHRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIilcbiAgICAgICAgICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNyZWF0ZU9wdGlvbihcIkxvd1wiKTtcbiAgICAgICAgICAgIGNyZWF0ZU9wdGlvbihcIkhpZ2hcIilcbiAgICAgICAgICAgIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3QudmFsdWUgPSB0YXNrLnByaW9yaXR5ICAgIDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXRJbnB1dExhYmVsKGUsIHNlbGVjdClcblxuICAgICAgICB9XG4gICAgfSlcbiAgLyogICBjb25zdCBpbnB1dExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKVxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpXG4gICAgaW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKGlucHV0TGFiZWwpXG4gICAgaW5wdXRXcmFwcGVyLmFwcGVuZENoaWxkKGlucHV0KTsgKi9cblxuICAgIGZ1bmN0aW9uIHNldElucHV0TGFiZWwoZSwgZWxlbWVudFRvQ3JlYXRlLCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGlucHV0V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgaW5wdXRXcmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJpbnB1dC13cmFwcGVyXCIpXG4gICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoaW5wdXRXcmFwcGVyKTtcbiAgICAgICAgY29uc3QgaW5wdXRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKVxuICAgICAgICBpbnB1dExhYmVsLnRleHRDb250ZW50ID0gZVxuICAgICAgICBpbnB1dExhYmVsLmh0bWxGb3IgPSBuYW1lXG4gICAgICAgIGlucHV0V3JhcHBlci5hcHBlbmRDaGlsZChpbnB1dExhYmVsKVxuICAgICAgICBpbnB1dFdyYXBwZXIuYXBwZW5kQ2hpbGQoZWxlbWVudFRvQ3JlYXRlKVxuICAgICAgICBcbiAgICB9XG5cbn1cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbnMoYnV0dG9uVHlwZSwgdGFzaykge1xuXG4gICAgY29uc29sZS5sb2codGFzayk7XG5cbiAgICBcbiAgICBsZXQgc3VibWl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKVxuICAgIHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU3VibWl0XCJcbiAgICBzdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZChcInN1Ym1pdC1idXR0b25cIilcbiAgICBzdWJtaXRCdXR0b24udHlwZSA9IFwic3VibWl0XCJcblxuXG4gICAgc3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiBzdWJtaXQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChidXR0b25UeXBlID09PSBcImFkZFRhc2tcIikge1xuICAgICAgICAgICAgZ2V0Rm9ybURhdGEoc3VibWl0QnV0dG9uLmZvcm0sIFwiYWRkVGFza1wiLCBjdXJyZW50Zm9sZGVyKVxuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvblR5cGUgPT09IFwiZWRpdFRhc2tcIikge1xuICAgICAgICAgICAgZ2V0Rm9ybURhdGEoc3VibWl0QnV0dG9uLmZvcm0sIFwiZWRpdFRhc2tcIiwgdGFzaylcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdldEZvcm1EYXRhKHN1Ym1pdEJ1dHRvbi5mb3JtLCBcImNyZWF0ZUZvbGRlclwiKVxuICAgICAgICAgICAgcG9wdXBNYWluWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJjcmVhdGVGb2xkZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgICAgIGZvcm0uaW5uZXJIVE1MID0gXCIgXCJcbiAgICAgICAgICAgIHBvcHVwSC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcblxuICAgIH0pXG5cblxuICAgIGxldCBjYW5jZWxCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpXG4gICAgY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiBwcmV2ZW50KGUsKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IGluZm9Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmluZm8tY29udGFpbmVyXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhpbmZvQ29udGFpbmVyKTtcbiAgICAgICAgbGV0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvcm1cIilcbiAgICAgICAgICAgIGlmIChpbmZvQ29udGFpbmVyICE9PSB1bmRlZmluZWQgJiYgZm9ybS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmZvQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbmZvLWNvbnRhaW5lclwiKVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb3JtXCIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZvcm0pO1xuICAgICAgICAgICAgICAgICAgICBpbmZvQ29udGFpbmVyLmlubmVySFRNTCA9IFwiIFwiXG4gICAgICAgICAgICAgICAgICAgIGluZm9Db250YWluZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvcm0uc3R5bGUuZGlzcGxheSA9IFwiXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIGZvcm0uaW5uZXJIVE1MID0gXCIgXCJcbiAgICAgICAgcG9wdXBILnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgIH0gKVxuICAgIGNhbmNlbEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQ2FuY2VsXCJcbiAgICBsZXQgYnV0dG9uc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgYnV0dG9uc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzdWJtaXRCdXR0b24pO1xuICAgIGJ1dHRvbnNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FuY2VsQnV0dG9uKTtcbiAgICBidXR0b25zQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJidXR0b25zLWNvbnRhaW5lclwiKVxuICAgIGlmIChidXR0b25UeXBlID09PSBcImluZm9cIikge1xuICAgICAgICBjb25zdCBpbmZvQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbmZvLWNvbnRhaW5lclwiKVxuICAgICAgICBpbmZvQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbnNDb250YWluZXIpO1xuICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlKCk7XG4gICAgICAgIHJldHVyblxuICAgIH0gXG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9ybVwiKVxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYnV0dG9uc0NvbnRhaW5lcik7XG5cbiAgICBcbn1cblxuXG5mdW5jdGlvbiBjcmVhdGVJbmZvQm94Q29udGVudHModG9Ebykge1xuICAgIGxldCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb3JtXCIpO1xuICAgIGZvcm0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgbGV0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJpbmZvLWNvbnRhaW5lclwiKTtcbiAgICBwb3B1cE1haW5bMF0uYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIFxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvQ29udGFpbmVyKFwiVGl0bGVcIiwgdG9Eby50aXRsZSkpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvQ29udGFpbmVyKFwiRGVzY3JpcHRpb25cIiwgdG9Eby5kZXNjcmlwdGlvbikpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvQ29udGFpbmVyKFwiRHVlIERhdGVcIiwgdG9Eby5kdWVEYXRlKSk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGluZm9Db250YWluZXIoXCJQcmlvcml0eVwiLCB0b0RvLnByaW9yaXR5KSk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGluZm9Db250YWluZXIoXCJGb2xkZXJcIiwgdG9Eby5wYXJlbnRGb2xkZXIuZm9sZGVyKSk7XG5cblxufVxuXG5cblxuZnVuY3Rpb24gaW5mb0NvbnRhaW5lcihsZWZ0LCByaWdodCkge1xuICAgIGxldCBpbmZvQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBpbmZvQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJpbmZvLWl0ZW1cIik7XG4gICAgbGV0IGluZm9MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcbiAgICBsZXQgaW5mb1JpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG5cblxuICAgIGluZm9MZWZ0LnRleHRDb250ZW50ID0gbGVmdDtcbiAgICBpbmZvUmlnaHQudGV4dENvbnRlbnQgPSByaWdodDtcbiAgICBpZiAobGVmdCA9PT0gXCJEZXNjcmlwdGlvblwiKSB7XG4gICAgICAgIGluZm9SaWdodC5jbGFzc0xpc3QuYWRkKFwiZGVzY1wiKVxuICAgICAgICBsZXQgZGVzY0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgZGVzY0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZGVzYy1jb250YWluZXJcIik7XG4gICAgICAgIGRlc2NDb250YWluZXIuYXBwZW5kQ2hpbGQoaW5mb1JpZ2h0KTtcbiAgICAgICAgaW5mb0NvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvTGVmdCk7XG4gICAgICAgIGluZm9Db250YWluZXIuYXBwZW5kQ2hpbGQoZGVzY0NvbnRhaW5lcik7XG4gICAgICAgIHJldHVybiBpbmZvQ29udGFpbmVyO1xuICAgICAgICBcbiAgICB9IGVsc2UgXG4gICAgXG4gICAgaW5mb0NvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvTGVmdCk7XG4gICAgaW5mb0NvbnRhaW5lci5hcHBlbmRDaGlsZChpbmZvUmlnaHQpO1xuICAgIHJldHVybiBpbmZvQ29udGFpbmVyO1xuICAgIFxuXG59XG5cblxuZnVuY3Rpb24gY3JlYXRlV2FybmluZ0JveChlKSB7XG4gICAgIHRvZ2dsZUZvcm1EaXNwbGF5KCk7XG4gICAgbGV0IHdhcm5pbmdUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcbiAgICB3YXJuaW5nVGV4dC5pbm5lckhUTUwgPSBgVGhpcyB3aWxsIHBlcm1hbmVudGx5IGRlbGV0ZSB0aGUgZm9sZGVyOmAgKyBcIjxicj5cIiArIGAke2V9YCArIFwiPGJyPlwiICsgXCJDbGljayAnZGVsZXRlJyB0byBjb25maXJtLlwiXG4gICAgcG9wdXBNYWluWzBdLmFwcGVuZENoaWxkKHdhcm5pbmdUZXh0KTtcbiAgICBjb25zb2xlLmxvZyhcInRlc3RcIilcbiAgICBwb3B1cE1haW5bMF0uY2xhc3NMaXN0LmFkZChcIndhcm5pbmdcIilcbn1cblxuIGZ1bmN0aW9uIHRvZ2dsZUZvcm1EaXNwbGF5KCkge1xuICAgIGxldCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb3JtXCIpXG4gICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gfSIsIi8qIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb2xkZXIoZm9sZGVyKSB7XG4gICAgY29uc3QgbmV3Rm9sZGVyID0gWyBdXG4gICAgbmV3Rm9sZGVyRG9tKGZvbGRlcik7XG4gICAgXG4gICAgcmV0dXJuIG5ld0ZvbGRlclxuICAgIFxufVxuXG5mdW5jdGlvbiBuZXdGb2xkZXJEb20oZm9sZGVyKSB7XG4gICAgY29uc3QgYXBwZW5kSGVyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9sZGVycy1jb250YWluZXJcIilcbiAgICBsZXQgZm9sZGVyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIilcbiAgICBmb2xkZXJCdXR0b24uY2xhc3NMaXN0LmFkZChcIm1lbnUtbGluay1pdGVtXCIpXG4gICAgZm9sZGVyQnV0dG9uLnRleHRDb250ZW50ID0gZm9sZGVyXG4gICAgYXBwZW5kSGVyZS5hcHBlbmRDaGlsZChmb2xkZXJCdXR0b24pXG59ICovXG5cbmltcG9ydCB7IGRpc3BsYXlTd2l0Y2hGb2xkZXJzIH0gZnJvbSBcIi4vZGlzcGxheUZvbGRlcnNcIlxuaW1wb3J0IHsgY3VycmVudGZvbGRlciwgZ2V0Rm9ybURhdGEgfSBmcm9tIFwiLi9nZXRGb3JtRGF0YVwiXG5pbXBvcnQgeyBwb3BVcCB9IGZyb20gXCIuL3BvcHVwXCJcblxuZXhwb3J0IGNsYXNzIGZvbGRlciB7XG4gICAgdG9Eb2ZvbGRlciA9IFtcblxuICAgIF1cblxuICAgIGNvbnN0cnVjdG9yKGZvbGRlcikge1xuICAgICAgICB0aGlzLmZvbGRlciA9IGZvbGRlclxuICAgIH1cbiAgICBcbiAgICBzZXRIZWFkZXIoKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbi10aXRsZVwiKVxuICAgICAgICBoZWFkZXIudGV4dENvbnRlbnQgPSB0aGlzLmZvbGRlcjtcbiAgICB9XG5cbiAgICBuZXdGb2xkZXJEb20oZm9sZGVyKSB7XG4gICAgICAgIHRoaXMuc2V0SGVhZGVyKCk7XG4gICAgICAgIHRoaXMuc3dpdGNoTWFpbkRpc3BsYXlGb2xkZXIodGhpcy50b0RvZm9sZGVyKTtcbiAgICAgICAgY29uc3QgYXBwZW5kSGVyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9sZGVycy1jb250YWluZXJcIilcbiAgICAgICAgbGV0IGZvbGRlckJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpXG4gICAgICAgIGZvbGRlckJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwibWVudS1saW5rLWl0ZW1cIilcbiAgICAgICAgZm9sZGVyQnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5mb2xkZXI7XG4gICAgICAgIGFwcGVuZEhlcmUuYXBwZW5kQ2hpbGQoZm9sZGVyQnV0dG9uKVxuICAgICAgICBsZXQgaWNvbiA9IG5ldyBJbWFnZSgyMCwgMjApXG4gICAgICAgIGljb24uc3JjID0gXCIvaW1nL3RyYXNoLnBuZ1wiXG4gICAgICAgIGZvbGRlckJ1dHRvbi5hcHBlbmRDaGlsZChpY29uKTtcbiAgICAgICAgZm9sZGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoYXQuZGVsZXRlRm9sZGVyKCk7XG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzXG4gICAgICAgIGZvbGRlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGF0LnN3aXRjaE1haW5EaXNwbGF5Rm9sZGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZFRvRm9sZGVyKHRvRG8pIHtcbiAgICAgICAgdGhpcy50b0RvZm9sZGVyLnB1c2godG9EbylcbiAgICAgICAgY29uc29sZS5sb2codGhpcy50b0RvZm9sZGVyKTtcbiAgICAgICAgdG9Eby5hZGRQYXJlbnRGb2xkZXIodGhpcyk7XG4gICAgfVxuXG4gICAgZGVsZXRlRnJvbUZvbGRlcihpdGVtVG9EZWxldGUpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy50b0RvZm9sZGVyLmluZGV4T2YoaXRlbVRvRGVsZXRlKVxuICAgICAgICB0aGlzLnRvRG9mb2xkZXIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICBzd2l0Y2hNYWluRGlzcGxheUZvbGRlcigpIHtcbiAgICAgICAgY3VycmVudGZvbGRlciA9IHRoaXM7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMudG9Eb2ZvbGRlcik7XG4gICAgICAgIGRpc3BsYXlTd2l0Y2hGb2xkZXJzKHRoaXMudG9Eb2ZvbGRlcik7XG4gICAgICAgIHRoaXMuc2V0SGVhZGVyKCk7XG4gICAgfVxuXG5cblxuICAgIGRlbGV0ZUZvbGRlcigpIHtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5mb2xkZXIpO1xuICAgICAgICBwb3BVcChcIndhcm5pbmdcIiwgdGhpcy5mb2xkZXIpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgZm9sZGVyIH0gZnJvbSBcIi4vY3JlYXRlTmV3Rm9sZGVyXCJcblxuaW1wb3J0IHsgcG9wVXAgfSBmcm9tIFwiLi9wb3B1cFwiXG5cbmltcG9ydCB7IGFkZFRvTWFpbkZvbGRlciwgc2lkZUJhckZvbGRlcnMgfSBmcm9tIFwiLi9mb2xkZXJzXCJcblxuZXhwb3J0IGNsYXNzIG5ld1RvRG8ge1xuXG4gICAgY29uc3RydWN0b3IodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSkge1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGVcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uXG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGVcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5XG4gICAgfVxuICAgIHN0b3JlSWNvbnMoc3Bhbikge1xuICAgICAgICBjb25zdCB0aGF0ID0gdGhpc1xuICAgICAgICBjb25zdCBhcnJheU9mSWNvbnMgPSBBcnJheS5mcm9tKHNwYW4pO1xuICAgICAgICBhcnJheU9mSWNvbnMuZm9yRWFjaChpY29uID0+IGljb24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKXtcbiAgICAgICAgICAgIGxldCBpY29uID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgIGlmIChpY29uLmNsYXNzTGlzdC5jb250YWlucyhcInRyYXNoXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5kZWxldGUoKTtcbiAgICAgICAgICAgICAgICB0aGF0LmRlbGV0ZTIoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWNvbi5jbGFzc0xpc3QuY29udGFpbnMoXCJlZGl0XCIpKSB7XG4gICAgICAgICAgICAgICAgcG9wVXAoXCJlZGl0XCIsIHRoYXQpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3BVcChcImluZm9cIiwgdGhhdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKVxuICAgIH1cbiAgICBzdG9yZURvbUVsZW1lbnQodGFza0NvbnRhaW5lcikge1xuICAgICAgICB0aGlzLnRhc2tDb250YWluZXIgPSB0YXNrQ29udGFpbmVyO1xuXG4gICAgfVxuICAgIGRlbGV0ZSgpIHtcbiAgICAgICAgdGhpcy50YXNrQ29udGFpbmVyLnJlbW92ZSgpOyAgICBcblxuICAgIH1cblxuICAgIGRlbGV0ZTIoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGFyZW50Rm9sZGVyKTtcbiAgICAgICAgdGhpcy5wYXJlbnRGb2xkZXIuZGVsZXRlRnJvbUZvbGRlcih0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuaW5XZWVrRm9sZGVyID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzaWRlQmFyRm9sZGVycy5yZW1vdmVXZWVrKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluVG9kYXlGb2xkZXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNpZGVCYXJGb2xkZXJzLnJlbW92ZVRvZGF5KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGFkZFRvTWFpbkZvbGRlcigpLnJlbW92ZUZyb21NYWluRm9sZGVyKHRoaXMpO1xuICAgIH1cblxuICAgIGFkZFBhcmVudEZvbGRlcihlKSB7XG4gICAgICAgIHRoaXMucGFyZW50Rm9sZGVyID0gZTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5wYXJlbnRGb2xkZXIpOyAgIFxuICAgIH1cbiAgICBcbiAgICBlZGl0VG9Ebyh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZVxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb25cbiAgICAgICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZVxuICAgICAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHlcbiAgICB9XG4gICAgXG4gICAgYWRkRGF0ZUZvbGRlcihmb2xkZXIpIHtcbiAgICAgICAgaWYgKGZvbGRlciA9PT0gXCJ3ZWVrXCIpIHtcbiAgICAgICAgICAgIHRoaXMuaW5XZWVrRm9sZGVyID0gdHJ1ZTtcbiAgICAgICAgfSBcbiAgICAgICAgaWYgKGZvbGRlciA9PT0gXCJ0b2RheVwiKSB7XG4gICAgICAgICAgICB0aGlzLmluVG9kYXlGb2xkZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgbWFpbkZvbGRlciwgc2lkZUJhckZvbGRlcnMgfSBmcm9tIFwiLi9mb2xkZXJzXCI7XG5pbXBvcnQgeyBkaXNwbGF5U3dpdGNoRm9sZGVycyB9IGZyb20gXCIuL2Rpc3BsYXlGb2xkZXJzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvaygpIHtjb25zdCBzaWRlQmFyTGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1lbnUtbGluay1pdGVtXCIpXG5cbiAgICBzaWRlQmFyTGlua3MuZm9yRWFjaChhID0+IGEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChhKSA9PiB7XG4gICAgICAgIGxldCBiID0gZXZlbnQudGFyZ2V0XG4gICAgICAgIGEucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoYi50ZXh0Q29udGVudCA9PT0gXCJXZWVrXCIpIHtcbiAgICAgICAgc2V0SGVhZGVyKFwiV2Vla1wiKTtcbiAgICAgICAgbGV0IGZvbGRlciA9IHNpZGVCYXJGb2xkZXJzLmdldFdlZWsoKTtcbiAgICAgICAgZGlzcGxheVN3aXRjaEZvbGRlcnMoZm9sZGVyKTtcbiAgICB9IGVsc2UgaWYgKGIudGV4dENvbnRlbnQgPT09IFwiQWxsXCIpIHtcbiAgICAgICAgc2V0SGVhZGVyKFwiQWxsXCIpO1xuICAgICAgICBsZXQgZm9sZGVyID0gbWFpbkZvbGRlcjtcbiAgICAgICAgZGlzcGxheVN3aXRjaEZvbGRlcnMobWFpbkZvbGRlcik7XG4gICAgfSBlbHNlIGlmIChiLnRleHRDb250ZW50ID09PSBcIlRvZGF5XCIpIHtcbiAgICAgICAgc2V0SGVhZGVyKFwiVG9kYXlcIilcbiAgICAgICAgbGV0IGZvbGRlciA9IHNpZGVCYXJGb2xkZXJzLmdldFRvZGF5KCk7XG4gICAgICAgIGRpc3BsYXlTd2l0Y2hGb2xkZXJzKGZvbGRlcik7XG4gICAgfVxuICAgIH0pKVxufVxuXG5cbmZ1bmN0aW9uIHNldEhlYWRlcihuZXdIZWFkZXIpIHtcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW4tdGl0bGVcIik7XG4gICAgaGVhZGVyLnRleHRDb250ZW50ID0gbmV3SGVhZGVyXG59IiwiaW1wb3J0IHsgbmV3VG9EbyB9IGZyb20gXCIuL2FkZFRvRG9cIjtcbmltcG9ydCB7IGFkZFRvTWFpbkZvbGRlciB9IGZyb20gXCIuL2ZvbGRlcnNcIjtcbmltcG9ydCB7IGNyZWF0ZUZvbGRlciB9IGZyb20gXCIuL2NyZWF0ZU5ld0ZvbGRlclwiO1xuaW1wb3J0IHsgcG9wVXAgfSBmcm9tIFwiLi9wb3B1cFwiO1xuaW1wb3J0IHsgb2sgfSBmcm9tIFwiLi9zaWRlYmFyLWxpbmtzXCI7XG5pbXBvcnQgeyBuZXdGb2xkZXIgfSBmcm9tIFwiLi9nZXRGb3JtRGF0YVwiO1xuY29uc3QgYWRkVGFza0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkLXRhc2tcIilcbmFkZFRhc2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBvcFVwKTtcblxuY29uc3QgY3JlYXRlRm9sZGVyQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjcmVhdGVGb2xkZXJcIik7XG5jcmVhdGVGb2xkZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBvcFVwKTtcblxub2soKTtcbm5ld0ZvbGRlcihcIkRlZmF1bHRcIilcblxuXG5cblxuXG4vKiBjaGVja0ZvckVycm9ycyhvayk7ICovIl0sIm5hbWVzIjpbIm1haW5Gb2xkZXIiLCJleHRyYUZvbGRlcnMiLCJhZGRUb01haW5Gb2xkZXIiLCJvayIsImFkZCIsInB1c2giLCJhZGRGb2xkZXIiLCJyZW1vdmVGcm9tTWFpbkZvbGRlciIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJmb2xkZXIiLCJjb25zb2xlIiwibG9nIiwic2lkZUJhckZvbGRlcnMiLCJ3ZWVrIiwidG9kYXkiLCJwdXNoVG9XZWVrIiwidG9EbyIsInRoaXMiLCJwdXNoVG9Ub2RheSIsInB1c2h0b0ltcG9ydGFudCIsImltcG9ydGFudCIsImdldFdlZWsiLCJnZXRUb2RheSIsInJlbW92ZVdlZWsiLCJyZW1vdmVUb2RheSIsImRpc3BsYXlTd2l0Y2hGb2xkZXJzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImUiLCJyZW1vdmUiLCJjcmVhdGVOZWVkZWRFbGVtZW50cyIsInRhc2tzQ29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsInRhc2tDb250YWluZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwidGFza05hbWUiLCJhcHBlbmRDaGlsZCIsImlubmVySFRNTCIsInRpdGxlIiwiZGl2IiwiZGF0ZSIsImR1ZURhdGUiLCJzdG9yZURvbUVsZW1lbnQiLCJzcGFuIiwiYXJyYXlPZlNwYW5zIiwiaSIsImltZyIsImZpcnN0RWxlbWVudENoaWxkIiwic3JjIiwiY3JlYXRlSWNvbnMiLCJzdG9yZUljb25zIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwibGVuZ3RoIiwiVHlwZUVycm9yIiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIk9iamVjdCIsInRvU3RyaW5nIiwiY2FsbCIsIkRhdGUiLCJnZXRUaW1lIiwid2FybiIsIkVycm9yIiwic3RhY2siLCJOYU4iLCJ0b0ludGVnZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsIk51bWJlciIsImlzTmFOIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJzdGFydE9mV2VlayIsImRpcnR5RGF0ZSIsIm9wdGlvbnMiLCJfcmVmIiwiX3JlZjIiLCJfcmVmMyIsIl9vcHRpb25zJHdlZWtTdGFydHNPbiIsIl9vcHRpb25zJGxvY2FsZSIsIl9vcHRpb25zJGxvY2FsZSRvcHRpbyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbCIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDIiLCJ3ZWVrU3RhcnRzT24iLCJsb2NhbGUiLCJSYW5nZUVycm9yIiwiZGF5IiwiZ2V0RGF5IiwiZGlmZiIsInNldERhdGUiLCJnZXREYXRlIiwic2V0SG91cnMiLCJpc1NhbWVXZWVrIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiZGF0ZUxlZnRTdGFydE9mV2VlayIsImRhdGVSaWdodFN0YXJ0T2ZXZWVrIiwic3RhcnRPZkRheSIsImlzU2FtZURheSIsImRhdGVMZWZ0U3RhcnRPZkRheSIsImRhdGVSaWdodFN0YXJ0T2ZEYXkiLCJjdXJyZW50Zm9sZGVyIiwiZ2V0Rm9ybURhdGEiLCJmb3JtIiwiYnV0dG9uVHlwZSIsImN1cnJlbnRGb2xkZXIiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwib2JqZWN0IiwiZnJvbUVudHJpZXMiLCJkZXNjcmlwdGlvbiIsInByaW9yaXR5IiwicGFyZW50Rm9sZGVyIiwidG9Eb2ZvbGRlciIsImVkaXRUb0RvIiwibmV3VG9EbyIsInBhcnNlZERhdGUiLCJwYXJzZSIsIm5vdyIsImlzVGhpc1dlZWsiLCJpc1RvZGF5IiwiYWRkRGF0ZUZvbGRlciIsImRldGVybWluZURhdGUiLCJhZGRUb0ZvbGRlciIsInN3aXRjaE1haW5EaXNwbGF5Rm9sZGVyIiwiYXNzaWduRm9ybURhdGEiLCJuZXdGb2xkZXIiLCJuZXdGb2xkZXJEb20iLCJwb3B1cEgiLCJnZXRFbGVtZW50QnlJZCIsInBvcHVwTWFpbiIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJwb3BVcCIsImV2ZW50IiwidGFyZ2V0IiwiaWQiLCJoZWFkZXIiLCJzdHlsZSIsImRpc3BsYXkiLCJ3YXJuaW5nVGV4dCIsImNyZWF0ZVdhcm5pbmdCb3giLCJ0ZXh0Q29udGVudCIsImNvbnRhaW5lciIsImluZm9Db250YWluZXIiLCJjcmVhdGVJbmZvQm94Q29udGVudHMiLCJjcmVhdGVCdXR0b25zIiwiY3JlYXRlQm94SW5wdXQiLCJhcnIiLCJlZGl0IiwidGFzayIsImEiLCJzZXRJbnB1dExhYmVsIiwiZWxlbWVudFRvQ3JlYXRlIiwibmFtZSIsImlucHV0V3JhcHBlciIsImlucHV0TGFiZWwiLCJodG1sRm9yIiwibWFwIiwiaW5wdXQiLCJ1bmRlZmluZWQiLCJ2YWx1ZSIsInRleHRBcmVhIiwidHlwZSIsInNlbGVjdCIsImNyZWF0ZU9wdGlvbiIsIm9wdGlvbiIsInN1Ym1pdEJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1dHRvbiIsImJ1dHRvbnNDb250YWluZXIiLCJsZWZ0IiwicmlnaHQiLCJpbmZvTGVmdCIsImluZm9SaWdodCIsImRlc2NDb250YWluZXIiLCJzZXRIZWFkZXIiLCJhcHBlbmRIZXJlIiwiZm9sZGVyQnV0dG9uIiwiaWNvbiIsIkltYWdlIiwidGhhdCIsImRlbGV0ZUZvbGRlciIsImFkZFBhcmVudEZvbGRlciIsImRlbGV0ZUZyb21Gb2xkZXIiLCJpdGVtVG9EZWxldGUiLCJBcnJheSIsImZyb20iLCJjdXJyZW50VGFyZ2V0IiwiY29udGFpbnMiLCJkZWxldGUiLCJkZWxldGUyIiwiaW5XZWVrRm9sZGVyIiwiaW5Ub2RheUZvbGRlciIsIm5ld0hlYWRlciIsImIiXSwic291cmNlUm9vdCI6IiJ9