(()=>{"use strict";const e=[];function t(e){document.querySelectorAll(".task-container").forEach((e=>e.remove())),e.forEach((e=>n(e)))}function n(e){let t=document.querySelector(".tasks-container"),n=document.createElement("div");n.classList.add("task-container");let o=document.createElement("p");n.appendChild(o),o.classList.add("task-name"),o.innerHTML=e.title;let i=document.createElement("div"),d=document.createElement("p");d.innerHTML=e.dueDate,d.classList.add("task-date"),n.appendChild(d),e.storeDomElement(n),i.classList.add("task-logos");let l=function(){let e=[];for(let t=1;t<=3;t++){let t=document.createElement("span"),n=document.createElement("img");t.appendChild(n),e.push(t)}return e[0].firstElementChild.src="/img/edit.png",e[0].classList.add("edit"),e[2].firstElementChild.src="/img/trash.png",e[2].classList.add("trash"),e[1].firstElementChild.src="/img/info.svg  ",e[1].classList.add("info"),e}();e.storeIcons(l),l.forEach((e=>i.appendChild(e))),n.appendChild(i),t.appendChild(n)}let o="";function i(i,l,s){let a=new FormData(i),r=Object.fromEntries(a),c=r.title,p=r.description,u=r.dueDate,h=r.priority;if("editTask"===l){let e=s.parentFolder;console.log(e.toDofolder),s.editToDo(c,p,u,h),t(e.toDofolder)}else"addTask"===l?function(t,o,i,d,l){let s=new m(t,o,i,d);var a;a=s,e.push(a),console.log(e),""!==l?(l.addToFolder(s),l.switchMainDisplayFolder()):n(s)}(c,p,u,h,s):function(e){let t=new d(e);o=t,t.newFolderDom(),t.switchMainDisplayFolder()}(c)}class d{toDofolder=[];constructor(e){this.folder=e}setHeader(){document.querySelector(".main-title").textContent=this.folder}newFolderDom(e){this.setHeader(),this.switchMainDisplayFolder(this.toDofolder);const t=document.querySelector(".folders-container");let n=document.createElement("a");n.classList.add("menu-link-item"),n.textContent=this.folder,t.appendChild(n);const o=this;n.addEventListener("click",(function(){o.switchMainDisplayFolder()}))}addToFolder(e){this.toDofolder.push(e),console.log(this.toDofolder),e.addParentFolder(this)}deleteFromFolder(e){let t=this.toDofolder.indexOf(e);this.toDofolder.splice(t,1)}switchMainDisplayFolder(){o=this,console.log(this.toDofolder),t(this.toDofolder),this.setHeader()}switch(){console.log(this.toDofolder)}updateDisplay(){}}const l=document.getElementById("Epopup"),s=document.getElementsByClassName("popup-main");function a(e,t){let n=event.target.id;const o=document.getElementById("popup-header");if(l.style.display="flex","info"===e)return o.textContent="Info",function(e){document.getElementById("form").style.display="none";let t=document.createElement("div");t.classList.add("info-container"),s[0].appendChild(t),t.appendChild(p("Title",e.title)),t.appendChild(p("Description",e.description)),t.appendChild(p("Due Date",e.dueDate)),t.appendChild(p("Priority",e.priority)),t.appendChild(p("Folder",e.parentFolder.folder))}(t),void c("info");"edit"===e&&(o.textContent="Edit",r(["Title","Description","Due Date","Priority"],0,t),c("editTask",t)),"createFolder"==n&&(o.textContent="Create Folder",r(["Title"]),s[0].classList.add("createFolder"),c("createFolder")),"add-task"==n&&(o.textContent="Add task",r(["Title","Description","Due Date","Priority"]),c("addTask"))}function r(e,t,n){const o=document.getElementById("form");let i=n;function d(e,t,n){const i=document.createElement("div");i.classList.add("input-wrapper"),o.appendChild(i);const d=document.createElement("label");d.textContent=e,d.htmlFor=n,i.appendChild(d),i.appendChild(t)}console.log(i),e.map((e=>{if("Title"===e){const t=document.createElement("input");void 0!==i&&(t.value=n.title);const o="title";t.name=o,d(e,t,o)}if("Description"===e){const l=document.createElement("textarea");void 0!==i&&(l.value=n.description),l.name="description",d(e,l)}if("Due Date"===e){const s=document.createElement("input");void 0!==i&&(s.value=n.dueDate),s.name="dueDate",s.type="date",d(e,s)}if("Priority"===e){const a=document.createElement("select");function r(e){let t=document.createElement("option");t.textContent=e,a.appendChild(t)}a.name="priority",r("Low"),r("High"),void 0!==i&&(a.value=n.priority),d(e,a)}}))}function c(e,t){console.log(t);let n=document.createElement("button");n.textContent="Submit",n.classList.add("submit-button"),n.type="submit",n.addEventListener("click",(function(d){d.preventDefault(),"addTask"===e?i(n.form,"addTask",o):"editTask"===e?i(n.form,"editTask",t):(i(n.form,"createFolder"),s[0].classList.remove("createFolder")),r.innerHTML=" ",l.style.display="none"}));let d=document.createElement("button");d.addEventListener("click",(function(e){e.preventDefault();let t=document.querySelector(".info-container");console.log(t);let n=document.getElementById("form");if(void 0!==t&&"none"===n.style.display){const e=document.querySelector(".info-container"),t=document.getElementById("form");console.log(t),e.innerHTML=" ",e.remove(),t.style.display=""}n.innerHTML=" ",l.style.display="none"})),d.textContent="Cancel";let a=document.createElement("div");if(a.appendChild(n),a.appendChild(d),a.classList.add("buttons-container"),"info"===e)return document.querySelector(".info-container").appendChild(a),void n.remove();const r=document.getElementById("form");r.appendChild(a)}function p(e,t){let n=document.createElement("div");n.classList.add("info-item");let o=document.createElement("p"),i=document.createElement("p");if(o.textContent=e,i.textContent=t,"Description"===e){i.classList.add("desc");let e=document.createElement("div");return e.classList.add("desc-container"),e.appendChild(i),n.appendChild(o),n.appendChild(e),n}return n.appendChild(o),n.appendChild(i),n}class m{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}storeIcons(e){const t=this;Array.from(e).forEach((e=>e.addEventListener("click",(function(e){let n=event.currentTarget;n.classList.contains("trash")?(t.delete(),t.delete2()):n.classList.contains("edit")?a("edit",t):a("info",t)}))))}storeDomElement(e){console.log(e),this.taskContainer=e}delete(){console.log(this.folder),this.taskContainer.remove(),console.log(this.folder)}delete2(){console.log(this.parentFolder),this.parentFolder.deleteFromFolder(this)}addParentFolder(e){this.parentFolder=e,console.log(this.parentFolder)}editToDo(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}}document.getElementById("add-task").addEventListener("click",a),document.getElementById("createFolder").addEventListener("click",a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,