(()=>{"use strict";const e=[],t={};function n(t){return{add:function(t){e.push(t)},mainFolder:e,addFolder:o,removeFromMainFolder:function(t){const n=e.indexOf(t);e.splice(n,1)}}}function o(e){t.folder=e,console.log(t)}const i={week:[],today:[],pushToWeek(e){this.week.push(e)},pushToToday(e){this.today.push(e)},pushtoImportant(e){important.push(e)},getWeek(){return this.week},getToday(){return this.today},removeWeek(e){const t=this.week.indexOf(e);this.week.splice(t,1)},removeToday(e){const t=this.week.indexOf(e);this.today.splice(t,1)}};function d(e){document.querySelectorAll(".task-container").forEach((e=>e.remove())),e.forEach((e=>r(e)))}function r(e){const t=document.querySelector(".tasks-container"),n=document.createElement("div");n.classList.add("task-container");const o=document.createElement("p");n.appendChild(o),o.classList.add("task-name"),o.innerHTML=e.title;const i=document.createElement("div"),d=document.createElement("p");d.innerHTML=e.dueDate,d.classList.add("task-date"),n.appendChild(d),e.storeDomElement(n),i.classList.add("task-logos");const r=function(){const e=[];for(let t=1;t<=3;t++){const t=document.createElement("span"),n=document.createElement("img");t.appendChild(n),e.push(t)}return e[0].firstElementChild.src="/img/edit.png",e[0].classList.add("edit"),e[2].firstElementChild.src="/img/trash.png",e[2].classList.add("trash"),e[1].firstElementChild.src="/img/info.svg  ",e[1].classList.add("info"),e}();e.storeIcons(r),r.forEach((e=>i.appendChild(e))),n.appendChild(i),t.appendChild(n)}function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function l(e){s(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===a(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function c(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var u={};function m(){return u}function p(e,t){var n,o,i,d,r,a,u,p;s(1,arguments);var f=m(),h=c(null!==(n=null!==(o=null!==(i=null!==(d=null==t?void 0:t.weekStartsOn)&&void 0!==d?d:null==t||null===(r=t.locale)||void 0===r||null===(a=r.options)||void 0===a?void 0:a.weekStartsOn)&&void 0!==i?i:f.weekStartsOn)&&void 0!==o?o:null===(u=f.locale)||void 0===u||null===(p=u.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==n?n:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=l(e),v=y.getDay(),g=(v<h?7:0)+v-h;return y.setDate(y.getDate()-g),y.setHours(0,0,0,0),y}function f(e,t,n){s(2,arguments);var o=p(e,n),i=p(t,n);return o.getTime()===i.getTime()}function h(e){s(1,arguments);var t=l(e);return t.setHours(0,0,0,0),t}function y(e,t){s(2,arguments);var n=h(e),o=h(t);return n.getTime()===o.getTime()}let v="";function g(e,t,o){const a=new FormData(e),l=Object.fromEntries(a),{title:c}=l,{description:u}=l,{dueDate:m}=l,{priority:p}=l;if("editTask"===t){const e=o.parentFolder;console.log(e.toDofolder),o.editToDo(c,u,m,p),d(e.toDofolder)}else"addTask"===t?function(e,t,o,d,a){const l=new S(e,t,o,d);(function(e){const t=Date.parse(e.dueDate);let n="",o="";(function(e,t){return s(1,arguments),f(e,Date.now(),t)})(t)&&(n=!0),function(e){return s(1,arguments),y(e,Date.now())}(t)&&(o=!0),!0===n&&(i.pushToWeek(e),e.addDateFolder("week")),!0===o&&(i.pushToToday(e),e.addDateFolder("today"))})(l),n().add(l),""!==a?(a.addToFolder(l),a.switchMainDisplayFolder()):r(l)}(c,u,m,p,o):D(c)}function D(e){const t=new b(e);v=t,t.newFolderDom(),t.switchMainDisplayFolder()}const E=document.getElementById("Epopup"),C=document.getElementsByClassName("popup-main");function k(e,t){const n=event.target.id,o=document.getElementById("popup-header");return E.style.display="flex","warning"===e?(document.querySelector(".popup-title").classList.add("header-warning"),function(e){L("on");const t=document.createElement("p");t.innerHTML=`This will permanently delete the folder:<br><br>${e}<br><br>Click 'delete' to confirm.`,C[0].appendChild(t),C[0].classList.add("warning");const n=document.createElement("button");n.textContent="Delete",n.classList.add("delete-button"),C[0].appendChild(n),n.addEventListener("click",(function(e){n.remove(),C[0].classList.remove("warning"),t.remove(),form.innerHTML=" ",E.style.display="none",L(),document.querySelector(".popup-title").classList.remove("header-warning"),e.preventDefault()}))}(t),void(o.textContent="Delete Folder")):"info"===e?(o.textContent="Info",function(e){document.getElementById("form").style.display="none";const t=document.createElement("div");t.classList.add("info-container"),C[0].appendChild(t),t.appendChild(T("Title",e.title)),t.appendChild(T("Description",e.description)),t.appendChild(T("Due Date",e.dueDate)),t.appendChild(T("Priority",e.priority)),t.appendChild(T("Folder",e.parentFolder.folder))}(t),void F("info")):("edit"===e&&(o.textContent="Edit",w(["Title","Description","Due Date","Priority"],0,t),F("editTask",t)),"createFolder"==n&&(o.textContent="Create Folder",w(["Title"]),C[0].classList.add("createFolder"),F("createFolder")),void("add-task"==n&&(o.textContent="Add task",w(["Title","Description","Due Date","Priority"]),F("addTask"))))}function w(e,t,n){const o=document.getElementById("form"),i=n;function d(e,t,n){const i=document.createElement("div");i.classList.add("input-wrapper"),o.appendChild(i);const d=document.createElement("label");d.textContent=e,d.htmlFor=n,i.appendChild(d),i.appendChild(t)}console.log(i),e.map((e=>{if("Title"===e){const t=document.createElement("input");void 0!==i&&(t.value=n.title);const o="title";t.name=o,d(e,t,o)}if("Description"===e){const r=document.createElement("textarea");void 0!==i&&(r.value=n.description),r.name="description",d(e,r)}if("Due Date"===e){const s=document.createElement("input");void 0!==i&&(s.value=n.dueDate),s.name="dueDate",s.type="date",d(e,s)}if("Priority"===e){const a=document.createElement("select");function l(e){const t=document.createElement("option");t.textContent=e,a.appendChild(t)}a.name="priority",l("Low"),l("High"),void 0!==i&&(a.value=n.priority),d(e,a)}}))}function F(e,t){const n=document.createElement("button");n.textContent="Submit",n.classList.add("submit-button"),n.type="submit",n.addEventListener("click",(o=>{o.preventDefault(),"addTask"===e?g(n.form,"addTask",v):"editTask"===e?g(n.form,"editTask",t):(g(n.form,"createFolder"),C[0].classList.remove("createFolder")),d.innerHTML=" ",E.style.display="none"}));const o=document.createElement("button");o.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".info-container");console.log(t);const n=document.getElementById("form");if(void 0!==t&&"none"===n.style.display){const e=document.querySelector(".info-container"),t=document.getElementById("form");console.log(t),e.innerHTML=" ",e.remove(),t.style.display=""}n.innerHTML=" ",E.style.display="none"})),o.textContent="Cancel";const i=document.createElement("div");if(i.appendChild(n),i.appendChild(o),i.classList.add("buttons-container"),"info"===e)return document.querySelector(".info-container").appendChild(i),void n.remove();const d=document.getElementById("form");d.appendChild(i)}function T(e,t){const n=document.createElement("div");n.classList.add("info-item");const o=document.createElement("p"),i=document.createElement("p");if(o.textContent=e,i.textContent=t,"Description"===e){i.classList.add("desc");const e=document.createElement("div");return e.classList.add("desc-container"),e.appendChild(i),n.appendChild(o),n.appendChild(e),n}return n.appendChild(o),n.appendChild(i),n}function L(e){document.getElementById("form").style.display="on"===e?"none":""}class b{toDofolder=[];constructor(e){this.folder=e}setHeader(){document.querySelector(".main-title").textContent=this.folder}newFolderDom(e){this.setHeader(),this.switchMainDisplayFolder(this.toDofolder);const t=document.querySelector(".folders-container");let n=document.createElement("a");n.classList.add("menu-link-item"),n.textContent=this.folder,t.appendChild(n);let o=new Image(20,20);o.src="/img/trash.png",n.appendChild(o),o.addEventListener("click",(function(){i.deleteFolder()}));const i=this;n.addEventListener("click",(function(){i.switchMainDisplayFolder()}))}addToFolder(e){this.toDofolder.push(e),console.log(this.toDofolder),e.addParentFolder(this)}deleteFromFolder(e){let t=this.toDofolder.indexOf(e);this.toDofolder.splice(t,1)}switchMainDisplayFolder(){v=this,console.log(this.toDofolder),d(this.toDofolder),this.setHeader()}deleteFolder(){k("warning",this.folder)}}class S{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}storeIcons(e){const t=this;Array.from(e).forEach((e=>e.addEventListener("click",(e=>{const n=event.currentTarget;n.classList.contains("trash")?(t.delete(),t.delete2()):n.classList.contains("edit")?k("edit",t):k("info",t)}))))}storeDomElement(e){this.taskContainer=e}delete(){this.taskContainer.remove()}delete2(){console.log(this.parentFolder),this.parentFolder.deleteFromFolder(this),!0===this.inWeekFolder&&i.removeWeek(this),!0===this.inTodayFolder&&i.removeToday(this),n().removeFromMainFolder(this)}addParentFolder(e){this.parentFolder=e,console.log(this.parentFolder)}editToDo(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}addDateFolder(e){"week"===e&&(this.inWeekFolder=!0),"today"===e&&(this.inTodayFolder=!0)}}function x(e){document.querySelector(".main-title").textContent=e}document.getElementById("add-task").addEventListener("click",k),document.getElementById("createFolder").addEventListener("click",k),document.querySelectorAll(".menu-link-item").forEach((t=>t.addEventListener("click",(t=>{const n=event.target;t.preventDefault(),"Week"===n.textContent?(x("Week"),d(i.getWeek())):"All"===n.textContent?(x("All"),d(e)):"Today"===n.textContent&&(x("Today"),d(i.getToday()))})))),D("Default")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,