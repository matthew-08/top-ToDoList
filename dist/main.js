(()=>{"use strict";const e=[];const t={week:[],today:[],pushToWeek(e){this.week.push(e)},pushToToday(e){this.today.push(e)},pushtoImportant(e){important.push(e)},getWeek(){return this.week},removeWeek(e){let t=this.week.indexOf(e);this.week.splice(t,1)}};function n(e){console.log(e),document.querySelectorAll(".task-container").forEach((e=>e.remove())),e.forEach((e=>o(e)))}function o(e){let t=document.querySelector(".tasks-container"),n=document.createElement("div");n.classList.add("task-container");let o=document.createElement("p");n.appendChild(o),o.classList.add("task-name"),o.innerHTML=e.title;let i=document.createElement("div"),d=document.createElement("p");d.innerHTML=e.dueDate,d.classList.add("task-date"),n.appendChild(d),e.storeDomElement(n),i.classList.add("task-logos");let r=function(){let e=[];for(let t=1;t<=3;t++){let t=document.createElement("span"),n=document.createElement("img");t.appendChild(n),e.push(t)}return e[0].firstElementChild.src="/img/edit.png",e[0].classList.add("edit"),e[2].firstElementChild.src="/img/trash.png",e[2].classList.add("trash"),e[1].firstElementChild.src="/img/info.svg  ",e[1].classList.add("info"),e}();e.storeIcons(r),r.forEach((e=>i.appendChild(e))),n.appendChild(i),t.appendChild(n)}function i(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function r(e){i(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===d(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function l(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var a={};function s(){return a}function c(e,t){var n,o,d,a,c,u,p,m;i(1,arguments);var f=s(),h=l(null!==(n=null!==(o=null!==(d=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(c=t.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==d?d:f.weekStartsOn)&&void 0!==o?o:null===(p=f.locale)||void 0===p||null===(m=p.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==n?n:0);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=r(e),v=y.getDay(),D=(v<h?7:0)+v-h;return y.setDate(y.getDate()-D),y.setHours(0,0,0,0),y}function u(e,t,n){i(2,arguments);var o=c(e,n),d=c(t,n);return o.getTime()===d.getTime()}function p(e){i(1,arguments);var t=r(e);return t.setHours(0,0,0,0),t}function m(e,t){i(2,arguments);var n=p(e),o=p(t);return n.getTime()===o.getTime()}let f="";function h(d,r,l){let a=new FormData(d),s=Object.fromEntries(a),c=s.title,p=s.description,h=s.dueDate,v=s.priority;if("editTask"===r){let e=l.parentFolder;console.log(e.toDofolder),l.editToDo(c,p,h,v),n(e.toDofolder)}else"addTask"===r?function(n,d,r,l,a){let s=new w(n,d,r,l);var c;(function(e){let n=Date.parse(e.dueDate),o="";!function(e,t){return i(1,arguments),u(e,Date.now(),t)}(n)?function(e){return i(1,arguments),m(e,Date.now())}(n)&&(o="today"):o="week","week"===o?(t.pushToWeek(e),e.addDateFolder("week")):"today"===o&&(t().pushToToday(e),e.addDateFolder("today"))})(s),c=s,e.push(c),console.log(e),""!==a?(a.addToFolder(s),a.switchMainDisplayFolder()):function(e){o(e)}(s)}(c,p,h,v,l):function(e){let t=new y(e);f=t,t.newFolderDom(),t.switchMainDisplayFolder()}(c)}class y{toDofolder=[];constructor(e){this.folder=e}setHeader(){document.querySelector(".main-title").textContent=this.folder}newFolderDom(e){this.setHeader(),this.switchMainDisplayFolder(this.toDofolder);const t=document.querySelector(".folders-container");let n=document.createElement("a");n.classList.add("menu-link-item"),n.textContent=this.folder,t.appendChild(n);const o=this;n.addEventListener("click",(function(){o.switchMainDisplayFolder()}))}addToFolder(e){this.toDofolder.push(e),console.log(this.toDofolder),e.addParentFolder(this)}deleteFromFolder(e){let t=this.toDofolder.indexOf(e);this.toDofolder.splice(t,1)}switchMainDisplayFolder(){f=this,console.log(this.toDofolder),n(this.toDofolder),this.setHeader()}switch(){console.log(this.toDofolder)}updateDisplay(){}}const v=document.getElementById("Epopup"),D=document.getElementsByClassName("popup-main");function g(e,t){let n=event.target.id;const o=document.getElementById("popup-header");if(v.style.display="flex","info"===e)return o.textContent="Info",function(e){document.getElementById("form").style.display="none";let t=document.createElement("div");t.classList.add("info-container"),D[0].appendChild(t),t.appendChild(C("Title",e.title)),t.appendChild(C("Description",e.description)),t.appendChild(C("Due Date",e.dueDate)),t.appendChild(C("Priority",e.priority)),t.appendChild(C("Folder",e.parentFolder.folder))}(t),void k("info");"edit"===e&&(o.textContent="Edit",E(["Title","Description","Due Date","Priority"],0,t),k("editTask",t)),"createFolder"==n&&(o.textContent="Create Folder",E(["Title"]),D[0].classList.add("createFolder"),k("createFolder")),"add-task"==n&&(o.textContent="Add task",E(["Title","Description","Due Date","Priority"]),k("addTask"))}function E(e,t,n){const o=document.getElementById("form");let i=n;function d(e,t,n){const i=document.createElement("div");i.classList.add("input-wrapper"),o.appendChild(i);const d=document.createElement("label");d.textContent=e,d.htmlFor=n,i.appendChild(d),i.appendChild(t)}console.log(i),e.map((e=>{if("Title"===e){const t=document.createElement("input");void 0!==i&&(t.value=n.title);const o="title";t.name=o,d(e,t,o)}if("Description"===e){const r=document.createElement("textarea");void 0!==i&&(r.value=n.description),r.name="description",d(e,r)}if("Due Date"===e){const l=document.createElement("input");void 0!==i&&(l.value=n.dueDate),l.name="dueDate",l.type="date",d(e,l)}if("Priority"===e){const a=document.createElement("select");function s(e){let t=document.createElement("option");t.textContent=e,a.appendChild(t)}a.name="priority",s("Low"),s("High"),void 0!==i&&(a.value=n.priority),d(e,a)}}))}function k(e,t){console.log(t);let n=document.createElement("button");n.textContent="Submit",n.classList.add("submit-button"),n.type="submit",n.addEventListener("click",(function(o){o.preventDefault(),"addTask"===e?h(n.form,"addTask",f):"editTask"===e?h(n.form,"editTask",t):(h(n.form,"createFolder"),D[0].classList.remove("createFolder")),d.innerHTML=" ",v.style.display="none"}));let o=document.createElement("button");o.addEventListener("click",(function(e){e.preventDefault();let t=document.querySelector(".info-container");console.log(t);let n=document.getElementById("form");if(void 0!==t&&"none"===n.style.display){const e=document.querySelector(".info-container"),t=document.getElementById("form");console.log(t),e.innerHTML=" ",e.remove(),t.style.display=""}n.innerHTML=" ",v.style.display="none"})),o.textContent="Cancel";let i=document.createElement("div");if(i.appendChild(n),i.appendChild(o),i.classList.add("buttons-container"),"info"===e)return document.querySelector(".info-container").appendChild(i),void n.remove();const d=document.getElementById("form");d.appendChild(i)}function C(e,t){let n=document.createElement("div");n.classList.add("info-item");let o=document.createElement("p"),i=document.createElement("p");if(o.textContent=e,i.textContent=t,"Description"===e){i.classList.add("desc");let e=document.createElement("div");return e.classList.add("desc-container"),e.appendChild(i),n.appendChild(o),n.appendChild(e),n}return n.appendChild(o),n.appendChild(i),n}class w{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}storeIcons(e){const t=this;Array.from(e).forEach((e=>e.addEventListener("click",(function(e){let n=event.currentTarget;n.classList.contains("trash")?(t.delete(),t.delete2()):n.classList.contains("edit")?g("edit",t):g("info",t)}))))}storeDomElement(e){this.taskContainer=e}delete(){this.taskContainer.remove()}delete2(){console.log(this.parentFolder),this.parentFolder.deleteFromFolder(this),"week"===this.dateFolder&&t.removeWeek(this)}addParentFolder(e){this.parentFolder=e,console.log(this.parentFolder)}editToDo(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}addDateFolder(e){this.dateFolder=e}}document.getElementById("add-task").addEventListener("click",g),document.getElementById("createFolder").addEventListener("click",g),function(){const e=document.querySelectorAll(".menu-link-item");console.log("test"),e.forEach((e=>e.addEventListener("click",(e=>{let o=event.target;e.preventDefault(),"Week"===o.textContent&&n(t.getWeek())}))))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,