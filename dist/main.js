(()=>{"use strict";function e(e){let t=document.querySelector(".tasks-container"),n=document.createElement("div");n.classList.add("task-container");let o=document.createElement("p");n.appendChild(o),o.classList.add("task-name"),o.innerHTML=e.title;let d=document.createElement("div"),i=document.createElement("p");i.innerHTML=e.dueDate,i.classList.add("task-date"),n.appendChild(i),d.classList.add("task-logos"),function(){let e=[];for(let t=1;t<=3;t++){let t=document.createElement("span"),n=document.createElement("img");t.appendChild(n),e.push(t)}return e[0].firstElementChild.src="/img/edit.png",e[0].classList.add("edit"),e[2].firstElementChild.src="/img/trash.png",e[2].classList.add("trash"),e[1].firstElementChild.src="/img/info.svg  ",e[1].classList.add("info"),e}().forEach((e=>d.appendChild(e))),n.appendChild(d),t.appendChild(n)}const t=[];class n{toDofolder=[];constructor(e){this.folder=e}setHeader(){document.querySelector(".main-title").textContent=this.folder}newFolderDom(e){this.setHeader(),this.switchMainDisplayFolder(this.toDofolder);const t=document.querySelector(".folders-container");let n=document.createElement("a");n.classList.add("menu-link-item"),n.textContent=this.folder,t.appendChild(n);const o=this;n.addEventListener("click",(function(){o.switchMainDisplayFolder()}))}addToFolder(e){this.toDofolder.push(e)}consoleLog(){console.log(this.toDofolder)}switchMainDisplayFolder(){console.log(this.toDofolder),function(t){document.querySelectorAll(".task-container").forEach((e=>e.remove())),t.forEach((t=>e(t)))}(this.toDofolder),this.setHeader()}switch(){console.log(this.toDofolder)}updateDisplay(){}}class o{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.folder=o}}let d="";function i(i,l,a){let s=new FormData(i),c=Object.fromEntries(s),r=c.title,m=c.description,u=c.dueDate,p=c.priority;"addTask"===l?function(n,d,i,l,a){let s=new o(n,d,i,l);var c;c=s,t.push(c),console.log(t),""!==a?(a.addToFolder(s),a.switchMainDisplayFolder()):e(s)}(r,m,u,p,a):function(e){let t=new n(e);d=t,t.newFolderDom(),t.switchMainDisplayFolder()}(r)}const l=document.getElementById("Epopup"),a=document.getElementsByClassName("popup-main");function s(e){let t=event.target.id;console.log(t);const n=document.getElementById("popup-header");l.style.display="flex","createFolder"==t&&(n.textContent="Create Folder",c(["Title"]),a[0].classList.add("createFolder"),r("createFolder")),"add-task"==t&&(n.textContent="Add task",c(["Title","Description","Due Date","Priority"]),r("addTask"))}function c(e){const t=document.getElementById("form");function n(e,n,o){const d=document.createElement("div");d.classList.add("input-wrapper"),t.appendChild(d);const i=document.createElement("label");i.textContent=e,i.htmlFor=o,d.appendChild(i),d.appendChild(n)}e.map((e=>{if("Title"===e){const t=document.createElement("input"),o="title";t.name=o,n(e,t,o)}if("Description"===e){const d=document.createElement("textarea");d.name="description",n(e,d)}if("Due Date"===e){const i=document.createElement("input");i.name="dueDate",i.type="date",n(e,i)}if("Priority"===e){const l=document.createElement("select");function a(e){let t=document.createElement("option");t.textContent=e,l.appendChild(t)}l.name="priority",a("Low"),a("High"),n(e,l)}}))}function r(e){let t=document.createElement("button");t.textContent="Submit",t.classList.add("submit-button"),t.type="submit",t.addEventListener("click",(function(n){n.preventDefault(),"addTask"===e?i(t.form,"addTask",d):(i(t.form,"createFolder"),a[0].classList.remove("createFolder")),s.innerHTML=" ",l.style.display="none"}));let n=document.createElement("button");n.addEventListener("click",(function(e){e.preventDefault(),s.innerHTML=" ",l.style.display="none"})),n.textContent="Cancel";let o=document.createElement("div");o.appendChild(t),o.appendChild(n),o.classList.add("buttons-container");const s=document.getElementById("form");s.appendChild(o)}document.getElementById("add-task").addEventListener("click",s),document.getElementById("createFolder").addEventListener("click",s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,